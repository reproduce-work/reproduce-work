[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "import os\nos.environ[\"REPROWORKDIR\"] = \"reproduce\"\nimport os\nfrom dotenv import load_dotenv\nfrom pathlib import Path\nimport functools\nimport hashlib\nimport inspect\nimport re\nimport toml\nimport pandas as pd\nimport numpy as np\nload_dotenv()\n\n\ndef printrw(*args, **kwargs):\n    '''fancy reproduce.work print function'''\n    # if the first arg is a string, prepend it with ╔ω\n    if len(args) &gt; 0 and isinstance(args[0], str):\n        args = (\"╔ω: \"+args[0], *args[1:])\n\n    # for each arg, replace newlines with ╚\n    if len(args) &gt; 0:\n        new_args = []\n        for a in args[:-1]:\n            if isinstance(a, str):  \n                a = a.replace(\"\\n\", \"\\n║ \")\n\n            new_args.append(a)\n        if isinstance(args[:-1], str): \n            new_args.append(args[:-1].replace(\"\\n\", \"\\n╚ \"))\n        else:\n            new_args.append(args[-1])\n        args = tuple(new_args)\n\n    print(*args, **kwargs, flush=True)\n\n    \n\ndef set_default_dir(quiet=True):\n    if not os.getenv(\"REPROWORKDIR\", False):\n        if not quiet:\n            printrw('Setting reproduce.work config dir to ./reproduce. Be sure to run generate_config() to generate a config file before\\n'+\n              'executing any other commands. Define `REPROWORKDIR` ENV variable with valid config to avoid this message.')\n        return Path(\"./reproduce\")\n    else:\n        return os.getenv(\"REPROWORKDIR\")\n\nreproduce_dir = os.getenv(\"REPROWORKDIR\", set_default_dir(quiet=False))\ndev_image_tag = os.getenv(\"REPRODEVIMAGE\")\n\n\n\n\ndef read_base_config():\n    with open(Path(reproduce_dir, 'config.toml'), 'r') as f:\n        base_config = toml.load(f)\n    return base_config\n\n    \ndef toml_dump(val):\n    # Convert special types to serializable formats\n    def serialize_special_types(obj):\n        if isinstance(obj, pd.Timestamp):\n            return obj.isoformat()\n        elif isinstance(obj, np.ndarray):\n            return obj.tolist()\n        elif isinstance(obj, pd.DataFrame):\n            return obj.to_dict(orient='records')\n        elif obj is None:\n            return 'None'\n        elif isinstance(obj, dict):\n            return {k: serialize_special_types(v) for k, v in obj.items()}\n        elif isinstance(obj, list):\n            return [serialize_special_types(i) for i in obj]\n        else:\n            return obj\n\n    serialized_val = serialize_special_types(val)\n    \n    return toml.loads(toml.dumps({'val': serialized_val}))['val']\n\nclass ReproduceWorkEncoder(toml.TomlEncoder):\n    def dump_str(self, v):\n        \"\"\"Encode a string.\"\"\"\n        if \"\\n\" in v:\n            return v  # If it's a multi-line string, return it as-is\n        return super().dump_str(v)\n    \n    def dump_value(self, v):\n        \"\"\"Determine the type of a Python object and serialize it accordingly.\"\"\"\n        if isinstance(v, str) and \"\\n\" in v:\n            return '\"\"\"\\n' + v.strip() + '\\n' + '\"\"\"'\n        return super().dump_value(v)\n\n\ndef validate_base_config(base_config, quiet=False):\n    required_keys = ['authors', 'repro']\n    for key in required_keys:\n        if key not in base_config:\n            #printrw(toml.dumps(base_config))\n            if not quiet:\n                printrw(f\"Error with ╔ω config: Missing required field '{key}' in config.toml\")\n            return False\n        if key=='repro':\n            if 'stages' not in base_config['repro']:\n                if not quiet:\n                    printrw(f\"Error with ╔ω config:: Missing required field 'repro.stages' in reproduce.work configuration at {reproduce_dir}/config.toml\")\n                return False\n            for stage in base_config['repro']['stages']:\n                if (f'repro.stage.{stage}' not in base_config) and (stage not in base_config['repro']['stage']):\n                    if not quiet:\n                        (toml.dumps(base_config, encoder=ReproduceWorkEncoder()))\n                    printrw(f\"Error with ╔ω config:: Missing required field repro.stage.{stage} in reproduce.work configuration at {reproduce_dir}/config.toml\")\n                    return False\n    return True\n\ndef requires_config(func):\n    def wrapper(*args, **kwargs):\n        try:\n            config = read_base_config()\n        except:\n            raise Exception(\"Your reproduce.work config is either missing or invalid. Run generate_config() to generate a config file.\")\n        if not validate_base_config(config):\n            raise Exception(\"Your reproduce.work configuration is not valid.\")\n        if func.__name__ in [\"publish_data\",\"publish_file\"] and VAR_REGISTRY['REPROWORK_REMOTE_URL'] is None:\n            raise Exception(f\"register_notebook(*) to use this function: {func.__name__}\")\n        return func(*args, **kwargs)\n    return wrapper\n\n\nVAR_REGISTRY = {\n    'REPROWORK_REMOTE_URL': None,\n    'REPROWORK_ACTIVE_NOTEBOOK': None\n}"
  },
  {
    "objectID": "core.html#test-code",
    "href": "core.html#test-code",
    "title": "core",
    "section": "Test Code",
    "text": "Test Code\n\nregister_notebook('01_core.ipynb')\n\n╔ω: Notebook nbs/01_core.ipynb already registered in reproduce/config.toml\n╔ω: Registered notebook https://github.com/reproduce-work/reproduce-work/blob/main/nbs/01_core.ipynb in reproduce/config.toml\n\n\n\npublish_data(\"Hello world!\", \"simple_string\")\n\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#simple_string\n\n\n&lt;__main__.PublishedObj at 0xffffac0f9850&gt;\n\n\n\n# Test the serialize_to_toml function\ndata_sample = {\n    'name': 'John',\n    'age': 28,\n    'is_student': False,\n    'scores': [85, 90, 78, 92],\n    'birthday': pd.Timestamp('2000-01-01'),\n    'matrix': np.array([[1, 2], [3, 4]]),\n    'df': pd.DataFrame({\n        'A': [1, 2, 3],\n        'B': ['a', 'b', 'c'],\n        'date': [pd.Timestamp('2022-01-01'), pd.Timestamp('2022-01-02'), pd.Timestamp('2022-01-03')]\n    }),\n    'nested_dict': {\n        'key1': 'value1',\n        'sub_dict': {\n            'sub_key': 'sub_value'\n        }\n    },\n    'none_value': None\n}\n\n#publish_data(data_sample, \"data_sample\")  # This should capture this line number and timestamp\n\n\n# publishing the exact same data twice will NOT update the pubdata.toml file\n#rw_data_sample = publish_data(data_sample, \"data_sample\")\n#rw_data_sample\n\n\nbase_config = read_base_config()\ndynamic_loc = Path(base_config['repro']['files']['dynamic'])\npublinks = find_pubdata_links()\npldf = pd.DataFrame(publinks)\npldf\n\n\n\n\n\n\n\n\nvariable\npath\nstart_pos\nend_pos\nline_range\ntoml_header\non_line\nat_char\nhash\n\n\n\n\n0\npublished_url\nhttps://github.com/reproduce-work/reproduce-wo...\n122\n203\n(1, 11)\n[p_value_str]\n3\n18\nNone\n\n\n1\npublished_url\nhttps://github.com/reproduce-work/reproduce-wo...\n741\n822\n(13, 24)\n[x]\n16\n18\nNone\n\n\n2\npublished_url\nhttps://github.com/reproduce-work/reproduce-wo...\n3620\n3701\n(26, 37)\n[y]\n29\n18\nNone\n\n\n3\npublished_url\nhttps://github.com/reproduce-work/reproduce-wo...\n6811\n6892\n(39, 50)\n[reproducible_plot_5073a37e]\n48\n18\nNone\n\n\n4\npublished_url\nhttps://github.com/reproduce-work/reproduce-wo...\n7136\n7217\n(52, 61)\n[simple_string]\n53\n18\nNone\n\n\n\n\n\n\n\n\nvars = (pldf.variable=='published_url')\ndict(zip(\n    pldf.loc[vars,'toml_header'].str.slice(1,-1).tolist(), \n    pldf.loc[vars,'path'].tolist()\n))\n\n{'p_value_str': 'https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml',\n 'x': 'https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml',\n 'y': 'https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml',\n 'reproducible_plot_5073a37e': 'https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml',\n 'simple_string': 'https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml'}"
  },
  {
    "objectID": "paper.html",
    "href": "paper.html",
    "title": "paper",
    "section": "",
    "text": "import pandas as pd\nfrom reproduce_work import *\n\n╔ω: Setting reproduce.work config dir to ./reproduce. Be sure to run generate_config() to generate a config file before\nexecuting any other commands. Define `REPROWORKDIR` ENV variable with valid config to avoid this message.\n\n\n\n#from reproduce_work.core import register_notebook\n\n\nregister_notebook('03_paper.ipynb')\n\n╔ω: Notebook nbs/03_paper.ipynb already registered in reproduce/config.toml\n╔ω: Registered notebook https://github.com/reproduce-work/reproduce-work/blob/main/nbs/03_paper.ipynb in reproduce/config.toml\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\nimport statsmodels.api as sm\n\nrandom_state = np.random.RandomState(2353)\n\n# 1. Generating Data\n# Generate 1000 random samples from a standard normal distribution for x-axis\nx = random_state.randn(1000)\n# Generate 1000 random samples from a gamma distribution for y-axis\n# We'll use shape=2 and scale=1 for the gamma distribution as an example.\ny = random_state.gamma(2, 1, 1000)\n# add noise\nu, v = random_state.randn(1000), random_state.randn(1000)\ny = y + 0.3*(x + u) + 3*v\n\n\n#plt.style.use('seaborn-whitegrid')\n\n# 2. Scatter Plot\n# Create a main figure and axes\nfig = plt.figure(figsize=(8, 8))\n# Define the proportions of the scatter plot and histograms\nscatter_ax = plt.axes([0.2, 0.2, 0.6, 0.6])  # [left, bottom, width, height]\nx_hist_ax = plt.axes([0.2, 0.05, 0.6, 0.15], sharex=scatter_ax)\ny_hist_ax = plt.axes([0.05, 0.2, 0.15, 0.6], sharey=scatter_ax)\n\n# Plot the scatter plot\nscatter_ax.scatter(x, y, alpha=0.5)\nscatter_ax.set_xlabel('Normal Distribution')\nscatter_ax.set_ylabel('Gamma Distribution')\n\n# 3. Histograms\n# Plot the histogram for x-values\nx_hist_ax.hist(x, bins=50, edgecolor='k', alpha=0.6, color='blue', orientation='vertical')\nx_hist_ax.set_ylabel(' ')\nx_hist_ax.set_title(' ')\n# Add ticks at 0, 30, 60 for the frequency axis\nx_hist_ax.set_yticks([0, 20, 40])\nx_hist_ax.set_yticklabels([0, 20, 40])\n\n# Plot the rotated histogram for y-values\ny_hist_ax.hist(y, bins=50, edgecolor='k', alpha=0.6, color='red', orientation='horizontal')\ny_hist_ax.set_title(' ')\n\n# Remove ticks from the histograms\nx_hist_ax.xaxis.set_tick_params(which='both', size=0)\nx_hist_ax.yaxis.set_tick_params(which='both', size=0)\ny_hist_ax.xaxis.set_tick_params(which='both', size=0)\ny_hist_ax.yaxis.set_tick_params(which='both', size=0)\n\n\n# Adjustments to the previous visualization:\n\n# 1. Flipping the y-data histogram so that left corresponds to higher frequencies.\ny_hist_ax.clear()  # Clear the previous histogram\ny_hist_ax.hist(y, bins=50, edgecolor='k', alpha=0.6, color='red', orientation='horizontal')\ny_hist_ax.invert_xaxis()  # Invert the x-axis to achieve the desired flipping\ny_hist_ax.set_xlabel('Frequency')\n\n# 2. For the scatter plot, use circle markers with the color purple\nscatter_ax.clear()  # Clear the previous scatter plot\nscatter_ax.scatter(x, y, s=15, alpha=0.5, c='purple', marker='o')\nscatter_ax.set_xlabel('Normal Distribution')\nscatter_ax.set_ylabel('Gamma Distribution')\n\n\n\n# compute slope and stats\n# perform OLS regression\nX = sm.add_constant(x)\nmodel = sm.OLS(y, X).fit()\nmodel_summary = (\n    model\n    .summary()\n    .tables[1]\n    .as_latex_tabular()\n    .replace('\\n', ' ')\n    .replace('const', '$\\\\alpha$')\n    .replace('x1', '$\\\\beta$')\n)\n\n\n# extract coefficients and p-values\nalpha, beta = model.params\np_alpha, p_beta = model.pvalues\np_alpha_str = f'{p_alpha:.3f}'\np_beta_str = f'{p_beta:.3f}'\n\nscatter_ax.plot(x, alpha + beta*x, color='black', lw=4)\n\n\n# Add ticks at 0, 30, 60 for the frequency axis\ny_hist_ax.set_xticks([5, 30, 60])\ny_hist_ax.set_xticklabels([0, 30, 60])\n\n# Set a white background with grid\nfor ax in [scatter_ax, x_hist_ax, y_hist_ax]:\n    ax.set_facecolor('white')\n    ax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n\n# add p-value and slope to plot\n# alpha\nscatter_ax.text(x=-1.5, y=14, s='y = α + β x + u', size=16)\n\n# Add the SVG to the plot in the bottom right corner\n\nplt.title('A concept for a verifiably reproducible scatter plot', size=15, pad=10, x=2.1, y=1.01)\n# Display the updated plot\nplt.show()\n\n\n\n\n\n# save the figure\nfig.savefig('img/scatter_plot.pdf', format='pdf', dpi=1200, bbox_inches='tight')\n\n\nx_obj = publish_data(x, 'x', metadata={'description': 'x-values for scatter plot'})\n\n╔ω: Updated x in reproduce/pubdata.toml\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#x\n\n\n\ny_obj = publish_data(y, 'y', metadata={'description': 'y-values for scatter plot'})\n\n╔ω: Updated y in reproduce/pubdata.toml\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#y\n\n\n\nscatter_obj = publish_file('img/scatter_plot.pdf', metadata={\n    'plot': True,\n    'description': 'Scatter plot with OLS model line from regression of y on x',\n    'badge': 'reproduce-work-logo',\n    'plot_data': {\n        'x': x_obj.metadata['published_url'],\n        # can automatically render published objects to be cross-referenced in the metadata\n        'y': y_obj, # &lt;-- is of PublishedObj type; gets rendered as y_obj.metadata['published_url']\n        'alpha': alpha,\n        'beta': beta,\n        'p_alpha': p_alpha,\n        'p_beta': p_beta\n    }\n})\n\nmodel_summary_metadata = {\n    'description': 'OLS Model Summary from regression of y on x',\n    'badge': 'reproduce-work-logo',\n    'model_data': {\n        'x': x_obj.embedded_link,\n        'y': y_obj.embedded_link,\n    },\n    'plots': [scatter_obj.embedded_link]\n}\nmodel_pub_obj = publish_data(\n    model_summary, 'ols_model_summary',\n    metadata=model_summary_metadata\n)\n\nassert x_obj.embedded_link.endswith('x'), x_obj.embedded_link\n\n{'plot': True, 'description': 'Scatter plot with OLS model line from regression of y on x', 'badge': 'reproduce-work-logo', 'plot_data': {'x': 'https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml', 'y': &lt;reproduce_work.core.PublishedObj object at 0xffffb4475040&gt;, 'alpha': 2.136814322490183, 'beta': 0.2921029690635062, 'p_alpha': 1.4742605344903455e-83, 'p_beta': 0.003632109212982725}}\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#y\n{'plot': True, 'description': 'Scatter plot with OLS model line from regression of y on x', 'badge': 'reproduce-work-logo', 'plot_data': {'x': 'https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml', 'y': 'https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#y', 'alpha': 2.136814322490183, 'beta': 0.2921029690635062, 'p_alpha': 1.4742605344903455e-83, 'p_beta': 0.003632109212982725}}\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#scatter_plot_1749877b\n╔ω: Updated ols_model_summary in reproduce/pubdata.toml\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#ols_model_summary\n\n\n\n\n\n\nj = process_pubdata_links(verbose=True)\n\n╔ω: modify_links(3, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L1-L11)\n╔ω: modify_links(15, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L13-L23)\n╔ω: modify_links(27, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L25-L35)\n╔ω: modify_links(46, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L37-L48)\n╔ω: modify_links(51, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L50-L59)\n╔ω: modify_links(73, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L61-L75)\n╔ω: modify_links(81, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L77-L89)\n╔ω: modify_links(65, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L13-L23)\n╔ω: modify_links(65, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#y, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L25-L35)\n╔ω: modify_links(80, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#scatter_plot_1749877b, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L61-L75)\n╔ω: modify_links(92, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#x, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L13-L23)\n╔ω: modify_links(93, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#y, https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#L25-L35)"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "introduction",
    "section": "",
    "text": "reproduce.work is a set of standards, software, and people aligned for the purpose of scientific reproducibility. These components are all independent but work most effectively together:\n\nA set of standards for the structure of a computationally reproducible project for scientific publishing.\nA set of software development tools (that currently works with Python, Jupyter, and VSCode based workflows) which make it easy to create, validate, and publish reproducible projects.\n\nThis tooling is based on Docker and allows you to use any code and nearly program for your work, while ensuring that your work is reproducible.\nWe currenlty support authorship in any text-based, markdown, or notebook based environment\n🖋️ seemless, full-powered LaTeX support (not just MathJax, folks)\n🔁 auto-compiled PDFs, triggered by file changes\n🧰 cross-platform reproducibility\n\nA group of people who support the devlopment of these tools and the adoption of these standards.\n\n\n\nThe objective of this software is to facilitate a version open science with reproducibility of computational results in published scientific work. The software is developed to integrate with existing computing paradigms and development workflows, including any docker-targeted build system. The goal is to accomodate the vast space of computation and logic that counts as “scientific computing” while providing a framework that constrains the core essence of scientific publishing to an ontology that facilitates and encourages reproducibile practices for humans both producing and consuming science."
  },
  {
    "objectID": "introduction.html#what-is-reproduce.work",
    "href": "introduction.html#what-is-reproduce.work",
    "title": "introduction",
    "section": "",
    "text": "reproduce.work is a set of standards, software, and people aligned for the purpose of scientific reproducibility. These components are all independent but work most effectively together:\n\nA set of standards for the structure of a computationally reproducible project for scientific publishing.\nA set of software development tools (that currently works with Python, Jupyter, and VSCode based workflows) which make it easy to create, validate, and publish reproducible projects.\n\nThis tooling is based on Docker and allows you to use any code and nearly program for your work, while ensuring that your work is reproducible.\nWe currenlty support authorship in any text-based, markdown, or notebook based environment\n🖋️ seemless, full-powered LaTeX support (not just MathJax, folks)\n🔁 auto-compiled PDFs, triggered by file changes\n🧰 cross-platform reproducibility\n\nA group of people who support the devlopment of these tools and the adoption of these standards.\n\n\n\nThe objective of this software is to facilitate a version open science with reproducibility of computational results in published scientific work. The software is developed to integrate with existing computing paradigms and development workflows, including any docker-targeted build system. The goal is to accomodate the vast space of computation and logic that counts as “scientific computing” while providing a framework that constrains the core essence of scientific publishing to an ontology that facilitates and encourages reproducibile practices for humans both producing and consuming science."
  },
  {
    "objectID": "introduction.html#installation",
    "href": "introduction.html#installation",
    "title": "introduction",
    "section": "Installation",
    "text": "Installation\nRequires Docker or suitable drop-in replacement such as OrbStack. See Docker requirement for more details.\n\nPython-based workflow\nTo incorporate reproduce.work elements into your Python-based workflow, simply install the package or include it in your requirements.txt and rebuild your project.\npip install reproduce_work\n\nimport os\nos.environ[\"REPROWORKDIR\"] = \"reproduce\"\nfrom reproduce_work import generate_config, register_notebook"
  },
  {
    "objectID": "introduction.html#how-to-use",
    "href": "introduction.html#how-to-use",
    "title": "introduction",
    "section": "How to use",
    "text": "How to use\n\nGetting started\nGenerate configuration at beginning of your project\n\ngenerate_config(options={\n    'authors': {\n        'author1': {\n            'name': 'Alex P. Miller',\n            'email': 'alex.miller@marshall.usc.edu',\n            'affiliation': 'USC Marshall School of Business'\n        }\n     },\n     'project': {\n        'full_title': '\\\\\\\\texttt{reproduce.work}: A framework to facilitate cross-platform computational reproducibility in scientific publishing',\n        'abstract': ('\\n'.join([\n            'In metascience, computational reproduction is the process of reproducing the results of a scientific paper ',\n            'using the data and code provided by the authors of the paper. This subject sits within the broader context of ',\n            '``reproducibility''\" in scientific  research, which has been core to the philosophy of science for decades. However, ',\n            'the practice of science has fallen woefully short of meeting even basic standards toward true and widespread ' ,\n            'reproducibility. In this project, we focus primarily on addressing the narrow problem of computational reproducibility. ',\n            'We propose a framework for facilitating computational reproducibility in scientific publishing, which we call ' ,\n            'reproduce.work. The reproducibility standards are designed to be cross-platform and to work with any programming language, ',\n            'though our first working software interfaces are in Python.', \n            'We highlight the distinction between open and reproducibile practices and show how our software framework encourages ',\n            'both simultaneously. The results of this very paper can be reproduced on any machine that can execute a containerized ',\n            'image using the reproduce.work workflow. We conclude by discussing the potential of the framework for improving rigor ',\n            'and fidelity of computational science for both producers and consumers of published work.'\n        ])),\n        'github_repo': 'reproduce-work/reproduce-work',\n     },\n     'nbdev_project': True,\n     'dev_image_tag': 'reproduce-work-dev',\n     'repro': 'default',\n     'verbose': True\n})\n\n╔ω: Successfully generated reproduce.work configuration at reproduce/config.toml\n\n\n\nregister_notebook('00_introduction.ipynb')\n\n╔ω: Registered notebook https://github.com/reproduce-work/reproduce-work/blob/main/nbs/00_introduction.ipynb in reproduce/config.toml\n\n\nRun code to analyze data and generate figures\n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\nplt.rcParams['figure.figsize'] = [6, 5]\n\nrandom_state = np.random.RandomState(552)\n\n# Generate data\nx = random_state.normal(size=100)\ny = 0.5*x + random_state.normal(scale=10, size=100)\n\n# Plot data with seaborn\nsns.set_style('white')\n\n# compute slope and stats\nslope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n# plot x-y scatter data\nx_y_plot = sns.scatterplot(x=x, y=y)\n\n# plot best fit line\nx_y_plot.plot(x, intercept + slope*x, color='black')\n\n# Compute p-value of slope \n# render p-value with 3 decimal places and no scientific notation\np_value_str = f'{p_value:.3f}'\n\n# add p-value and slope to plot\nx_y_plot.text(x=4.5, y=25, s='β')\nx_y_plot.text(x=4.75, y=20, s=f'p-value: {p_value_str}')\nx_y_plot.text(x=4.75, y=15, s=f'slope: {slope:.3f}')\nx_y_plot.text(x=4.75, y=10, s=f'intercept: {intercept:.3f}')\n\n# Set title\nx_y_plot.set_title('Reproducibly Simulated Data')\n\n# save figure\nplt.savefig('img/reproducible_plot.svg', bbox_inches='tight')\n_ = x_y_plot\n\n\n\n\n\n\nDecide which data, figures, and files to save for publication.\nThere are two primary types of publishable data:\n\ndata assignments\n\ndefined via: reproduce_work.publish_data\nDesigned to standardize data management and facilitate data validation\n\nfile assignments\n\ndefined via: reproduce_work.publish_file\nDesigned to standardize file management and facilitate file validation, allowing for reproducible workflows for arbitrarily complex data structures\n\n\n\nfrom reproduce_work import publish_data, publish_file\n\n\npublish_data(p_value_str, \"p_value_str\", metadata={\n    'description': 'The p-value of the coefficient on the slope of the linear regression line.',\n})\n\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#p_value_str\n\n\n&lt;reproduce_work.core.PublishedObj at 0xffff55c7c520&gt;\n\n\n\npublish_data(x, \"x\", metadata={\n    'description': 'The simulated X data',\n    'units': 'kilograms'\n})\n\n╔ω: Updated x in reproduce/pubdata.toml\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#x\n\n\n&lt;reproduce_work.core.PublishedObj at 0xffff55c7c070&gt;\n\n\n\npublish_data(y, \"y\", metadata={\n    'description': 'The simulated Y data',\n    'units': 'meters'\n})\n\n╔ω: Updated y in reproduce/pubdata.toml\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#y\n\n\n&lt;reproduce_work.core.PublishedObj at 0xffff55c7cf40&gt;\n\n\n\n#document_image_dir = \npublish_file('img/reproducible_plot.svg', metadata={\n    'description': 'A plot of X vs Y',\n})\n\n\n\n\n╔ω: Updated watched files to ['document/main.md', 'reproduce/pubdata.toml', 'document/latex/template.tex', 'document/latex/bibliography.bib', 'nbs/00_introduction.ipynb', 'img/reproducible_plot.svg']\n╔ω: loading embedded link: https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml#reproducible_plot_5073a37e\n\n\n&lt;reproduce_work.core.PublishedObj at 0xffff55c5e8b0&gt;\n\n\n\nimport numpy as np\nimport pandas as pd\nimport toml\n\nsample_data = {\n    'name': 'John',\n    'age': 28,\n    'is_student': False,\n    'scores': [85, 90, 78, 92],\n    'birthday': pd.Timestamp('2000-01-01'),\n    'matrix': np.array([[1, 2], [3, 4]]),\n    'df': pd.DataFrame({\n        'A': [1, 2, 3],\n        'B': ['a', 'b', 'c'],\n        'date': [pd.Timestamp('2022-01-01'), pd.Timestamp('2022-01-02'), pd.Timestamp('2022-01-03')]\n    }),\n    'nested_dict': {\n        'key1': 'value1',\n        'sub_dict': {\n            'sub_key': 'sub_value'\n        }\n    },\n    'none_value': None\n}\n\ndef toml_dump(val):\n    return toml.loads(toml.dumps({'val':val}))['val']\n\ntoml_dump(sample_data )\n\n{'name': 'John',\n 'age': 28,\n 'is_student': False,\n 'scores': [85, 90, 78, 92],\n 'birthday': \"Timestamp('2000-01-01 00:00:00')\",\n 'matrix': [['1', '2'], ['3', '4']],\n 'df': ['A', 'B', 'date'],\n 'nested_dict': {'key1': 'value1', 'sub_dict': {'sub_key': 'sub_value'}}}\n\n\n\nfrom reproduce_work import read_base_config\nbase_config = read_base_config()\nwith open(base_config['repro']['files']['dynamic'], 'r') as f:\n    print(f.read())\n\n[p_value_str]\ndescription = \"The p-value of the coefficient on the slope of the linear regression line.\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/blob/main/nbs/00_introduction.ipynb\"\ntype = \"data\"\ntimestamp = \"2023-10-11T05:33:12.738513\"\ncontent_hash = \"d68a5a88e3ca0ee94ee5951c43fbb552\"\ntimed_hash = \"ff0a8e6eaa111a041275e4636678f103\"\npython_version = \"3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:23:23)  [GCC 10.3.0]\"\nplatform_info = \"Linux-6.4.16-orbstack-00105-g14094bfeec09-aarch64-with-glibc2.35\"\nvalue = \"0.068\"\n\n[x]\ndescription = \"The simulated X data\"\nunits = \"kilograms\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/blob/main/nbs/00_introduction.ipynb\"\ntype = \"data\"\ntimestamp = \"2023-10-11T05:34:51.396397\"\ncontent_hash = \"38f13b81a58a7d931600e917d77dfe8f\"\ntimed_hash = \"0fb90cd95964538db0f47112baddac10\"\npython_version = \"3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:23:23)  [GCC 10.3.0]\"\nplatform_info = \"Linux-6.4.16-orbstack-00105-g14094bfeec09-aarch64-with-glibc2.35\"\nvalue = [ \"-0.15438854676085806\", \"-0.5912841266673995\", \"1.3457620267806991\", \"-0.3085476927297975\", \"-0.35074090433304067\", \"-1.343721369940541\", \"-0.41860346256356656\", \"2.392890531248967\", \"0.22032854237060082\", \"0.7867023188803995\", \"0.08878384294999392\", \"0.6565087673201803\", \"0.2412729155438198\", \"0.6854353883101262\", \"2.153899580706892\", \"0.649925720150528\", \"1.127458119203137\", \"-0.6357927443286684\", \"0.3077660698412044\", \"-1.6328895355458346\", \"0.567227693439327\", \"-0.21246173380662106\", \"-0.7203897514131021\", \"0.5952129857137533\", \"0.18819499630282482\", \"-0.8834998061258611\", \"0.7379945086294778\", \"-0.8471634166162177\", \"0.07930983762624676\", \"-0.10076438386878037\", \"0.4738798861563753\", \"-0.10847987920496371\", \"-1.16728052821831\", \"0.19401114268043276\", \"-1.8697690072012825\", \"-0.6079795737042001\", \"-0.46088161234713115\", \"2.8744072140185186\", \"0.5779526555390606\", \"0.18642158999690325\", \"-2.309463070393277\", \"0.9160646628168791\", \"-0.036987499173112684\", \"-0.6186664971219734\", \"-0.7375207406586269\", \"-0.3364114042058939\", \"0.6487550984010515\", \"0.7211593530346008\", \"-3.0024570001024453\", \"0.20827750750261484\", \"-0.9184527060704434\", \"-0.5672153127477911\", \"0.31933453622980007\", \"-0.37561851948771674\", \"-0.11011613613998829\", \"-2.5786876868233346\", \"-2.2352575258690286\", \"-0.14238353838147055\", \"-0.7776623814911557\", \"-0.12899276868200904\", \"0.821021437212202\", \"0.18632478617667347\", \"1.6469255261436233\", \"0.30333446984835577\", \"-0.2888772687627644\", \"0.4875026119003026\", \"0.2806902509255848\", \"-0.7998526623370962\", \"0.5301005871453163\", \"0.6998691293042977\", \"-0.08461487877674735\", \"-0.6322047366002711\", \"-0.9348762425303966\", \"-0.3857949711398192\", \"0.7758631517211686\", \"1.522836840694002\", \"0.25484897092674863\", \"2.0472839024926945\", \"-0.548936278321665\", \"0.34845246870820656\", \"-1.7722932107691587\", \"1.888704309449281\", \"-1.1123418283924837\", \"1.3957453427395787\", \"-0.8294367151092402\", \"-1.1699534011438901\", \"1.0257270873514317\", \"0.7725006923281748\", \"0.3168385924779005\", \"-0.30234878342901056\", \"-0.1751641272612662\", \"0.3708234523019773\", \"-2.3638133220013833\", \"-0.4096668642141042\", \"-0.4503293983368002\", \"0.03271836277038858\", \"-1.4370887475738319\", \"0.19926882906384208\", \"-0.08950771441073352\", \"0.4128495165175878\",]\n\n[y]\ndescription = \"The simulated Y data\"\nunits = \"meters\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/blob/main/nbs/00_introduction.ipynb\"\ntype = \"data\"\ntimestamp = \"2023-10-11T05:34:51.425615\"\ncontent_hash = \"f8945d4c03988df0cd59c181035e86a9\"\ntimed_hash = \"64b8c5494b6baa2e0255d10320cf7bc4\"\npython_version = \"3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:23:23)  [GCC 10.3.0]\"\nplatform_info = \"Linux-6.4.16-orbstack-00105-g14094bfeec09-aarch64-with-glibc2.35\"\nvalue = [ \"6.157526466969694\", \"-9.302292211258417\", \"-13.445653295124679\", \"-8.631538800322812\", \"6.90483152433306\", \"5.207550454217913\", \"0.16281392537419195\", \"11.328419829563888\", \"22.478972058029154\", \"8.09134242274941\", \"5.073777096618679\", \"10.521865081855475\", \"-16.790794925289998\", \"-8.771064388620061\", \"4.0201332562739776\", \"5.117579323047639\", \"7.625083590549531\", \"3.8773345015463985\", \"-3.928796702192886\", \"-14.12618901867805\", \"15.719046636739415\", \"-6.9901326969788835\", \"-1.2697524315402995\", \"16.200579300476225\", \"4.653298124929337\", \"15.260286007217859\", \"-8.66974802826228\", \"17.391748658118644\", \"-11.979777143905922\", \"-9.165369928333158\", \"-10.066499099879193\", \"6.630265916533632\", \"5.597192274467069\", \"21.121094702481354\", \"-0.37289209663747613\", \"-10.093484219122008\", \"-6.178013487751987\", \"4.612879529582713\", \"-6.7221265756959445\", \"1.5429361341495342\", \"-15.542297438913536\", \"-6.9087508309560315\", \"-5.756954497072782\", \"0.9567354246293611\", \"-14.214770323986233\", \"-12.709171551566424\", \"4.786356565840399\", \"-4.890780892875197\", \"-3.6073631505593395\", \"7.0359632267386765\", \"-0.24241139306973603\", \"-3.9167058403914647\", \"16.71776645328651\", \"-14.815178430705346\", \"-1.711860745824135\", \"-10.08015043115352\", \"-13.900633437259023\", \"-27.590693317580115\", \"2.4225289380487824\", \"0.4100939029862429\", \"-14.009201312069894\", \"26.99576623694627\", \"8.292226202794245\", \"-16.51426094603318\", \"-2.931299487241554\", \"-3.06749774639879\", \"-2.457980870324348\", \"-11.765930634755847\", \"-1.7957980955875312\", \"3.947583774063118\", \"1.7788813956475347\", \"-1.513133427837522\", \"21.831572921844153\", \"7.891774924891347\", \"-6.6299731645332045\", \"14.88059560881568\", \"-14.321343993977925\", \"4.842025745064475\", \"-18.45138246049829\", \"-2.5286695131892367\", \"26.92858990370225\", \"14.990430393073257\", \"-6.687320844036032\", \"-6.3145713683066536\", \"-1.865395572103326\", \"0.29997911599165183\", \"2.094399418593174\", \"5.231357076332482\", \"-10.36763582996726\", \"1.6895152163357683\", \"6.181719576405759\", \"-10.030869854369993\", \"-14.337403366313984\", \"6.834137681527773\", \"7.186270591613762\", \"-1.9468050084023705\", \"9.311246589228013\", \"0.08957849212100343\", \"-4.817637123369896\", \"7.997470135737686\",]\n\n[reproducible_plot_5073a37e]\ndescription = \"A plot of X vs Y\"\ntype = \"file\"\nfilepath = \"img/reproducible_plot.svg\"\ntimestamp = \"2023-10-11T05:34:51.453806\"\npython_version = \"3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:23:23)  [GCC 10.3.0]\"\nplatform_info = \"Linux-6.4.16-orbstack-00105-g14094bfeec09-aarch64-with-glibc2.35\"\ncontent_hash = \"d4b92c175f9a808e736f48bb953c0ca9\"\ntimed_hash = \"c71b79b2997cb154a874e1d8570256d4\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/blob/main/reproduce/pubdata.toml\"\ncontent_url = \"https://github.com/reproduce-work/reproduce-work/blob/main/img/reproducible_plot.svg\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/blob/main/nbs/00_introduction.ipynb\""
  },
  {
    "objectID": "standards.html",
    "href": "standards.html",
    "title": "standards",
    "section": "",
    "text": "import os\nfrom dotenv import load_dotenv\nload_dotenv()\n\ndef check_reproduceworkdir():\n    \"\"\"\n    Check if REPRODUCEWORKDIR is defined and if not prompts the user to do so.\n    Check if the following files exist: ${REPRODUCEWORKDIR}/config.toml and the required fieids: ['repro', 'repro.input','project']\n    \"\"\"\n    # Check if REPRODUCEWORKDIR is defined\n    if 'REPRODUCEWORKDIR' not in os.environ:\n        print(\"REPRODUCEWORKDIR environment variable is not defined.\")\n        print(\"Please define it using the following command:\")\n        print(\"export REPRODUCEWORKDIR=/path/to/reproduceworkdir\")\n        return False\n    \n    # Check if the directory exists\n    if not os.path.isdir(os.environ['REPRODUCEWORKDIR']):\n        print(f\"{os.environ['REPRODUCEWORKDIR']} does not exist.\")\n        return False\n    \n    # Check if the config.toml file exists\n    config_file = os.path.join(os.environ['REPRODUCEWORKDIR'], 'config.toml')\n    if not os.path.isfile(config_file):\n        print(f\"{config_file} does not exist.\")\n        return False\n    \n    # Check if the required fields exist in the config.toml file\n    with open(config_file, 'r') as f:\n        config = f.read()\n    if 'repro' not in config:\n        print(\"repro field is missing in the config.toml file.\")\n        return False\n    if 'repro.input' not in config:\n        print(\"repro.input field is missing in the config.toml file.\")\n        return False\n    if 'project' not in config:\n        print(\"project field is missing in the config.toml file.\")\n        return False\n    \n    return True\n\n\nimport yaml\nimport hashlib\nimport os\nimport toml\n\ndef verify_metadata():\n    # Check if reproducibility.yml exists\n    config_path = Path(os.environ['REPRODUCEWORKDIR'], 'config.toml')\n    if not os.path.exists():\n        return False, f'Config file not found in required location: {config_path}'\n\n    with open(config_path, 'r') as f:\n        metadata = toml.safe_load(f)\n    \n    # Check software version (mocked for demonstration)\n    software_name = metadata['software'][0]['name']\n    \n    # Check dataset checksum\n    dataset_name = metadata['datasets'][0]['name']\n    expected_checksum = metadata['datasets'][0]['checksum']\n    \n    if not os.path.exists(dataset_name):\n        return False, f\"Dataset {dataset_name} not found.\"\n    \n    with open(dataset_name, 'rb') as f:\n        bytes = f.read()\n        readable_hash = hashlib.sha256(bytes).hexdigest()\n        \n    if f\"sha256:{readable_hash}\" != expected_checksum:\n        return False, \"Dataset checksum mismatch.\"\n    \n    # Check presence of instructions\n    instructions_path = metadata['instructions']['path']\n    if not os.path.exists(instructions_path):\n        return False, \"Instructions for reproduction not found.\"\n    \n    # Check for report file\n    report_file = metadata.get('report_file')\n    if report_file and not os.path.exists(report_file):\n        return False, f\"Report file {report_file} not found.\"\n    \n    # Check for repro.input field in config.toml\n    config_file = os.path.join(os.environ['REPRODUCEWORKDIR'], 'config.toml')\n    if not os.path.isfile(config_file):\n        return False, f\"{config_file} does not exist.\"\n    \n    with open(config_file, 'r') as f:\n        config = toml.load(f)\n    \n    if 'repro.input' not in config:\n        return False, \"repro.input field is missing in the config.toml file.\"\n    \n    # Check that all files in repro.input exist and are published in pubdata.toml\n    pubdata_file = os.path.join(os.environ['REPRODUCEWORKDIR'], 'pubdata.toml')\n    if not os.path.isfile(pubdata_file):\n        return False, f\"{pubdata_file} does not exist.\"\n    \n    with open(pubdata_file, 'r') as f:\n        pubdata = toml.load(f)\n    \n    for file in config['repro.input']:\n        if not os.path.exists(file):\n            return False, f\"{file} not found in repro.input.\"\n        \n        if file not in pubdata:\n            return False, f\"{file} not found in pubdata.toml.\"\n        \n        file_metadata = pubdata[file]\n        if 'hash' not in file_metadata or 'timed_hash' not in file_metadata:\n            return False, f\"{file} missing hash or timed_hash in pubdata.toml.\"\n        \n        generating_script = file_metadata.get('generating_script')\n        if generating_script and not os.path.exists(generating_script):\n            return False, f\"Generating script {generating_script} not found for {file}.\"\n    \n    return True, \"Verification successful.\"\n\n\n# Mocking the presence of metadata and dataset for testing\nwith open('reproducibility.yml', 'w') as f:\n    yaml.dump({\n        'software': [{'name': 'Python', 'version': '3.8.5'}],\n        'datasets': [{'name': 'sample_data.csv', 'checksum': 'sha256:abcd1234'}],\n        'execution_environment': {'docker_image': 'repo_name:latest'},\n        'instructions': {'path': 'REPRODUCE.md'}\n    }, f)\n\n# Creating a mock dataset and instructions file\nwith open('sample_data.csv', 'w') as f:\n    f.write('sample,data')\nwith open('REPRODUCE.md', 'w') as f:\n    f.write('# Reproduction Instructions\\nFollow these steps...')\n\n# Testing the verification script\nverify_metadata()\n\ndef docker_verification():\n    \"\"\"Check for the presence of Dockerfile or docker-compose.yml.\"\"\"\n    if os.path.exists('Dockerfile') or os.path.exists('docker-compose.yml'):\n        return True\n    return False\n\ndef further_enhanced_verify_metadata():\n    # Basic metadata checks\n    success, message = verify_metadata()\n    if not success:\n        return False, message\n    \n    # Docker verification\n    if not docker_verification():\n        return False, \"Neither Dockerfile nor docker-compose.yml found. Execution environment cannot be verified.\"\n    \n    return True, \"Verification successful.\"\n\n# Mocking the presence of Dockerfile for testing (you can also mock docker-compose.yml similarly)\n#with open('Dockerfile', 'w') as f:\n#    f.write('# Sample Dockerfile\\nFROM python:3.8.5')\n\n# Testing the further enhanced verification function\nfurther_enhanced_verify_metadata()\n\nNameError: name 'yaml' is not defined\n\n\n\nimport re\nimport toml\n\ndef parse_insert_patterns(report_file):\n    \"\"\"Parse the report.reproduce file to identify all instances of the \\INSERT{*} pattern.\"\"\"\n    \n    with open(report_file, 'r') as f:\n        content = f.read()\n    \n    # Find all \\INSERT patterns\n    patterns = re.findall(r'\\\\INSERT\\{(.*?)\\}', content)\n    \n    return patterns\n\n# Mocking the report.reproduce file for testing\nwith open('report.reproduce', 'w') as f:\n    f.write(\"This is a sample report with some variables like \\\\INSERT{var1} and \\\\INSERT{var2}.\")\n\n# Testing the parsing function\ninsert_patterns = parse_insert_patterns('report.reproduce')\ninsert_patterns\n\n\ndef verify_variables_against_pubdata(variables, pubdata_file):\n    \"\"\"Verify that each variable from the INSERT patterns is present in the pubdata.toml file.\"\"\"\n    \n    # Load the pubdata.toml file\n    pubdata = toml.load(pubdata_file)\n    \n    missing_variables = [var for var in variables if var not in pubdata]\n    \n    return len(missing_variables) == 0, missing_variables\n\n\n# Testing the verification function\nsuccess, missing_vars = verify_variables_against_pubdata(insert_patterns, 'pubdata.toml')\nsuccess, missing_vars\n\n\ndef replace_patterns_with_values(report_file, pubdata_file, output_file):\n    \"\"\"Replace the INSERT patterns in report.reproduce with corresponding values from pubdata.toml.\"\"\"\n    \n    # Load the pubdata.toml file\n    pubdata = toml.load(pubdata_file)\n    \n    with open(report_file, 'r') as f:\n        content = f.read()\n    \n    # Replace each pattern with its value from pubdata\n    for var, value in pubdata.items():\n        content = content.replace(f'\\\\INSERT{{{var}}}', str(value))\n    \n    # Save the replaced content to output_file\n    with open(output_file, 'w') as f:\n        f.write(content)\n\n\n# Testing the replacement function\nreplace_patterns_with_values('report.reproduce', 'pubdata.toml', 'report.tmp')\n\n# Displaying the report.tmp for verification\nwith open('report.tmp', 'r') as f:\n    replaced_content = f.read()\n\nreplaced_content\n\n\ndef compare_hashes(file1, file2):\n    \"\"\"Compare the SHA-256 hashes of two files.\"\"\"\n    \n    # Calculate hash for file1\n    with open(file1, 'rb') as f:\n        bytes = f.read()\n        hash_file1 = hashlib.sha256(bytes).hexdigest()\n    \n    # Calculate hash for file2\n    with open(file2, 'rb') as f:\n        bytes = f.read()\n        hash_file2 = hashlib.sha256(bytes).hexdigest()\n    \n    return hash_file1 == hash_file2\n\n# Mocking the report.auto and original report_file for testing\nwith open('report.auto', 'w') as f:\n    f.write(replaced_content)\nwith open('original_report_file', 'w') as f:\n    f.write(replaced_content)\n\n# Testing the hash comparison function\nhashes_match = compare_hashes('report.auto', 'original_report_file')\nhashes_match"
  },
  {
    "objectID": "index.html#at-a-glance",
    "href": "index.html#at-a-glance",
    "title": "reproduce.work",
    "section": "At a glance",
    "text": "At a glance\n\n\n\n\nMain features:\n\n✅ A notebook-oriented workflow for publishing reproducible projects\n✅ Computational reproducibility standards that work across all major platforms\n✅ Verifiable, traceable, reproducible results in scientific documents\n✅ Deep linking to verified open data and code\n\n\n\nRoadmap features:\n\n🔳 Target HTML as a publishing destination with embedded metadata\n🔳 Better support for data validation, versioning, and provenance tracking"
  }
]