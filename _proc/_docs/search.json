[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "reproduce-work",
    "section": "",
    "text": "✅ Computational reproducibility across all major operating systems and platforms\n✅ A simple and intuitive API that fits into your existing workflow\n✅ Verifiable, traceable, reproducible results in scientific documents\n✅ Fancy PDF outputs"
  },
  {
    "objectID": "index.html#current-support",
    "href": "index.html#current-support",
    "title": "reproduce-work",
    "section": "Current support",
    "text": "Current support\n\nWorkflows\nAs of v0.0.1, reproduce.work has supprt for development/analysis workflows based on:\n\nPython\nJupyter notebooks\nR, RStudio\nJulia\npandoc\n\n\n\nTarget publishers and document formats\nPrimary outputs are currently PDF and HTML documents, with support for:\n\nLaTeX\nJupyter notebooks\nRMarkdown\npandoc markdown"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "reproduce-work",
    "section": "Install",
    "text": "Install\npip install reproduce_work"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "reproduce-work",
    "section": "How to use",
    "text": "How to use\n\nGetting started\n\nimport reproduce_work\nfrom reproduce_work.core import generate_config,read_base_config\nfrom reproduce_work.dynamic import publish_variable,publish_data,publish_file\n\nSetting reproduce.work config dir to ./reproduce\nSetting reproduce.work config dir to ./reproduce\n\n\nGenerate configuration at beginning of your project\n\ngenerate_config(inputs={\n    'authors': {\n        'author1': {\n            'name': 'Alex P. Miller',\n            'email': 'alex.miller@marshall.usc.edu',\n            'affiliation': 'USC Marshall School of Business'\n        }\n     },\n     'dev_image_tag': 'reproduce-work-dev',\n     #'verbose': True # enables print statements whenever data are updated/saved\n})\n\nSuccessfully generated reproduce.work configuration at reproduce/config.toml\nSuccessfully generated input file at reproduce/main.md\nSuccessfully generated latex template at reproduce/latex/template.tex\n\n\nRun code to analyze data and generate figures\n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\nplt.rcParams['figure.figsize'] = [6, 5]\n\nrandom_state = np.random.RandomState(552)\n\n# Generate data\nx = random_state.normal(size=100)\ny = 0.5*x + random_state.normal(scale=10, size=100)\n\n# Plot data with seaborn\nsns.set_style('white')\n\n# compute slope and stats\nslope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n# plot x-y scatter data\nx_y_plot = sns.scatterplot(x=x, y=y)\n\n# plot best fit line\nx_y_plot.plot(x, intercept + slope*x, color='black')\n\n# Compute p-value of slope \n# render p-value with 3 decimal places and no scientific notation\np_value_str = f'{p_value:.3f}'\n\n# add p-value and slope to plot\nx_y_plot.text(x=4.5, y=25, s='β')\nx_y_plot.text(x=4.75, y=20, s=f'p-value: {p_value_str}')\nx_y_plot.text(x=4.75, y=15, s=f'slope: {slope:.3f}')\nx_y_plot.text(x=4.75, y=10, s=f'intercept: {intercept:.3f}')\n\n# Set title\nx_y_plot.set_title('Reproducibly Simulated Data')\n\n# save figure\nplt.savefig('reproducible_plot.svg', bbox_inches='tight')\n\n\n\n\nThere are three primary types:\n\nnamed variables\n\ndefined via: reproduce_work.publish_variable\nDesigned to be used to facilitate production and review of reproducible results\n\ndata assignments\n\ndefined via: reproduce_work.publish_data\nDesigned to standardize data management and facilitate data validation\n\nfile assignments\n\ndefined via: reproduce_work.publish_file\nDesigned to standardize file management and facilitate file validation, allowing for reproducible workflows for arbitrarily complex data structures\n\n\n\npublish_variable(p_value_str, \"p_value_str\", metadata={\n    'description': 'The p-value of the coefficient on the slope of the linear regression line.',\n})\n\n\npublish_data(x, \"x\", metadata={\n    'description': 'The simulated X data',\n    'units': 'kilograms'\n})\n\n\npublish_data(y, \"y\", metadata={\n    'description': 'The simulated Y data',\n    'units': 'meters'\n})\n\n\npublish_file('reproducible_plot.svg', metadata={\n    'description': 'A plot of X vs Y',\n})\n\n\nbase_config = read_base_config()\nwith open(base_config['repro']['files']['dynamic'], 'r') as f:\n    print(f.read())\n\n[p_value_str]\ndescription = \"The p-value of the coefficient on the slope of the linear regression line.\"\ntype = \"string\"\ntimestamp = \"2023-10-02T09:39:49.549241\"\nvalue = \"0.068\"\n\n[x]\ndescription = \"The simulated X data\"\nunits = \"kilograms\"\ntype = \"data\"\ntimestamp = \"2023-10-02T09:39:49.570843\"\ncontent_hash = \"38f13b81a58a7d931600e917d77dfe8f\"\ntimed_hash = \"ca1b73c6c33f2d7ec93233d98207e7ce\"\nvalue = \"\"\"\narray = [-0.15438854676085806, -0.5912841266673995, 1.3457620267806991, -0.3085476927297975, -0.35074090433304067, -1.343721369940541, -0.41860346256356656, 2.392890531248967, 0.22032854237060082, 0.7867023188803995, 0.08878384294999392, 0.6565087673201803, 0.2412729155438198, 0.6854353883101262, 2.153899580706892, 0.649925720150528, 1.127458119203137, -0.6357927443286684, 0.3077660698412044, -1.6328895355458346, 0.567227693439327, -0.21246173380662106, -0.7203897514131021, 0.5952129857137533, 0.18819499630282482, -0.8834998061258611, 0.7379945086294778, -0.8471634166162177, 0.07930983762624676, -0.10076438386878037, 0.4738798861563753, -0.10847987920496371, -1.16728052821831, 0.19401114268043276, -1.8697690072012825, -0.6079795737042001, -0.46088161234713115, 2.8744072140185186, 0.5779526555390606, 0.18642158999690325, -2.309463070393277, 0.9160646628168791, -0.036987499173112684, -0.6186664971219734, -0.7375207406586269, -0.3364114042058939, 0.6487550984010515, 0.7211593530346008, -3.0024570001024453, 0.20827750750261484, -0.9184527060704434, -0.5672153127477911, 0.31933453622980007, -0.37561851948771674, -0.11011613613998829, -2.5786876868233346, -2.2352575258690286, -0.14238353838147055, -0.7776623814911557, -0.12899276868200904, 0.821021437212202, 0.18632478617667347, 1.6469255261436233, 0.30333446984835577, -0.2888772687627644, 0.4875026119003026, 0.2806902509255848, -0.7998526623370962, 0.5301005871453163, 0.6998691293042977, -0.08461487877674735, -0.6322047366002711, -0.9348762425303966, -0.3857949711398192, 0.7758631517211686, 1.522836840694002, 0.25484897092674863, 2.0472839024926945, -0.548936278321665, 0.34845246870820656, -1.7722932107691587, 1.888704309449281, -1.1123418283924837, 1.3957453427395787, -0.8294367151092402, -1.1699534011438901, 1.0257270873514317, 0.7725006923281748, 0.3168385924779005, -0.30234878342901056, -0.1751641272612662, 0.3708234523019773, -2.3638133220013833, -0.4096668642141042, -0.4503293983368002, 0.03271836277038858, -1.4370887475738319, 0.19926882906384208, -0.08950771441073352, 0.4128495165175878]\n\"\"\"\n\n[y]\ndescription = \"The simulated Y data\"\nunits = \"meters\"\ntype = \"data\"\ntimestamp = \"2023-10-02T09:39:49.595297\"\ncontent_hash = \"f8945d4c03988df0cd59c181035e86a9\"\ntimed_hash = \"158e94c7ed86a338cb12f36a6283aa45\"\nvalue = \"\"\"\narray = [6.157526466969694, -9.302292211258417, -13.445653295124679, -8.631538800322812, 6.90483152433306, 5.207550454217913, 0.16281392537419195, 11.328419829563888, 22.478972058029154, 8.09134242274941, 5.073777096618679, 10.521865081855475, -16.790794925289998, -8.771064388620061, 4.0201332562739776, 5.117579323047639, 7.625083590549531, 3.8773345015463985, -3.928796702192886, -14.12618901867805, 15.719046636739415, -6.9901326969788835, -1.2697524315402995, 16.200579300476225, 4.653298124929337, 15.260286007217859, -8.66974802826228, 17.391748658118644, -11.979777143905922, -9.165369928333158, -10.066499099879193, 6.630265916533632, 5.597192274467069, 21.121094702481354, -0.37289209663747613, -10.093484219122008, -6.178013487751987, 4.612879529582713, -6.7221265756959445, 1.5429361341495342, -15.542297438913536, -6.9087508309560315, -5.756954497072782, 0.9567354246293611, -14.214770323986233, -12.709171551566424, 4.786356565840399, -4.890780892875197, -3.6073631505593395, 7.0359632267386765, -0.24241139306973603, -3.9167058403914647, 16.71776645328651, -14.815178430705346, -1.711860745824135, -10.08015043115352, -13.900633437259023, -27.590693317580115, 2.4225289380487824, 0.4100939029862429, -14.009201312069894, 26.99576623694627, 8.292226202794245, -16.51426094603318, -2.931299487241554, -3.06749774639879, -2.457980870324348, -11.765930634755847, -1.7957980955875312, 3.947583774063118, 1.7788813956475347, -1.513133427837522, 21.831572921844153, 7.891774924891347, -6.6299731645332045, 14.88059560881568, -14.321343993977925, 4.842025745064475, -18.45138246049829, -2.5286695131892367, 26.92858990370225, 14.990430393073257, -6.687320844036032, -6.3145713683066536, -1.865395572103326, 0.29997911599165183, 2.094399418593174, 5.231357076332482, -10.36763582996726, 1.6895152163357683, 6.181719576405759, -10.030869854369993, -14.337403366313984, 6.834137681527773, 7.186270591613762, -1.9468050084023705, 9.311246589228013, 0.08957849212100343, -4.817637123369896, 7.997470135737686]\n\"\"\"\n\n[\"reproducible_plot.svg\"]\ndescription = \"A plot of X vs Y\"\ntype = \"file\"\ntimestamp = \"2023-10-02T09:39:49.670841\"\ncontent_hash = \"0b14eef9add06b8505520acd7f6ccf3b\"\ntimed_hash = \"046a70c27b541ed37d0ee6f17f9b7a02\"\n\n\n\nDecide which data, figures, and files to save for publication."
  },
  {
    "objectID": "build.html",
    "href": "build.html",
    "title": "build",
    "section": "",
    "text": "main\n\n main ()\n\n\n\n\nreplace_inserts_with_toml_data\n\n replace_inserts_with_toml_data (input_file, toml_file, output_file)\n\n\n\n\nread_base_config\n\n read_base_config ()\n\n\n#import os\n#os.listdir(Path(os.getcwd()))"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "test_validate_base_config\n\n test_validate_base_config ()\n\n\n\n\ngenerate_config\n\n generate_config (inputs={}, version='reproduce.work/v1/default')\n\n\n\n\nReproduceWorkEncoder\n\n ReproduceWorkEncoder (_dict=&lt;class 'dict'&gt;, preserve=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nrequires_config\n\n requires_config (func)\n\n\n\n\nvalidate_base_config\n\n validate_base_config (base_config)\n\n\n\n\nread_base_config\n\n read_base_config ()\n\n\n\n\nset_default_dir\n\n set_default_dir ()\n\n\n#import os\n#os.listdir(os.getcwd())\n\n: \n\n\n\nbase_config = {\n        'authors': {\n            'author1.name': 'Alex P. Miller',\n            'author1.affiliation': 'USC Marshall School of Business',\n            'author1.email': 'alex.miller@marshall.usc.edu'\n        },\n        'repro': {\n            'version': 'reproduce.work/v1/default',\n            'stages': ['init', 'develop', 'build']\n        },\n        'repro.files': {\n            'input': 'document/main.md',\n            'dynamic': 'document/data.toml',\n            'latex_template': 'document/latex/template.tex',\n            'output': 'document/latex/compiled.tex'\n        },\n        'repro.stage.init': {\n            'script': 'docker build -t {dev_image_tag} .\\ndocker build -t tinytex {reproduce_dir}/Dockerfile.tinytex\\ndocker build -t watcher {reproduce_dir}/Dockerfile.watch\\n'\n        },\n        'repro.stage.develop': {\n            'script': 'docker run -v $(pwd):/home/jovyan -p 8888:8888 {dev_image_tag} start.sh jupyter lab --LabApp.token=\\'\\'\\n\\\\INSERT{watch_cmd_here}\\n'\n        },\n        'repro.stage.build': {\n            'script': 'docker run --rm -i -v $(pwd):/home/jovyan -p 8888:8888 {dev_image_tag} python reproduce_work.build() # this replaces instances of \\\\INSERT{var} in `input` file\\ndocker run --rm -i -v $(pwd):/home lowdown # this converts the markdown to latex\\ndocker run --rm -i --net=none -v $(pwd):/home tinytex sh -c \"cd /home/document/latex && xelatex compiled.tex\" # this compiles the latex\\n'\n        }\n    }\nvalidate_base_config(base_config)\n\nTrue"
  },
  {
    "objectID": "dynamic.html",
    "href": "dynamic.html",
    "title": "dynamic",
    "section": "",
    "text": "2+2\n\n4\n\n\n\n\nrequires_config\n\n requires_config (func)\n\n\n\n\nvalidate_base_config\n\n validate_base_config (base_config)\n\n\n\n\nupdate_watched_files\n\n update_watched_files (add=[], remove=[])\n\n\n\n\nread_base_config\n\n read_base_config ()\n\n\n\n\nset_default_dir\n\n set_default_dir ()\n\n\n#generate_config()\n\n\n\n\npublish_variable\n\n publish_variable (value, var_name, metadata={})\n\n\n\n\nreproducible\n\n reproducible (var_assignment_func)\n\nA decorator to register the when and where of how a variable is assigned.\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\nserialize_to_toml\n\n serialize_to_toml (data, root=True)\n\nUnified function to serialize various Python data types to TOML format.\n\n\n\nNumpyEncoder\n\n NumpyEncoder (skipkeys=False, ensure_ascii=True, check_circular=True,\n               allow_nan=True, sort_keys=False, indent=None,\n               separators=None, default=None)\n\nExtensible JSON http://json.org encoder for Python data structures.\nSupports the following objects and types by default:\n\n\n\n\n\n\n\nPython\nJSON\n\n\n\n\ndict\nobject\n\n\nlist, tuple\narray\n\n\nstr\nstring\n\n\nint, float\nnumber\n\n\nTrue\ntrue\n\n\nFalse\nfalse\n\n\nNone\nnull\n\n\n\nTo extend this to recognize other objects, subclass and implement a .default() method with another method that returns a serializable object for o if possible, otherwise it should call the superclass implementation (to raise TypeError).\n\n\n\nReproduceWorkEncoder\n\n ReproduceWorkEncoder (_dict=&lt;class 'dict'&gt;, preserve=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\ncheck_for_defintion_in_context\n\n check_for_defintion_in_context (function_name='save')\n\n\n\n\nget_cell_index\n\n get_cell_index ()\n\nGet the current cell index in a Jupyter notebook environment. If not in Jupyter, return None.\n\npublish_variable(67890, \"test_var_timestamp_1\")  # This should capture this line number and timestamp\npublish_variable(\"Hello again!\", \"test_var_timestamp_2\")  # And this line number and timestamp\n\nVAR_REGISTRY\n\nWARNING: value of test_var_timestamp_1 was not a string. Converted to string: 67890.\n[test_var_timestamp_1]\ntype = \"string\"\ntimestamp = \"2023-10-02T05:50:16.028845\"\nvalue = \"67890\"\n\n[test_var_timestamp_2]\ntype = \"string\"\ntimestamp = \"2023-10-02T05:50:16.038555\"\nvalue = \"Hello again!\"\n\n\n\n{'test_var_timestamp_1': {'type': 'string',\n  'timestamp': '2023-10-02T05:50:16.028845',\n  'value': '67890'},\n 'test_var_timestamp_2': {'type': 'string',\n  'timestamp': '2023-10-02T05:50:16.038555',\n  'value': 'Hello again!'}}\n\n\n\n# Test the unified function\ndata_sample = {\n    'name': 'John',\n    'age': 28,\n    'is_student': False,\n    'scores': [85, 90, 78, 92],\n    'birthday': pd.Timestamp('2000-01-01'),\n    'matrix': np.array([[1, 2], [3, 4]]),\n    'df': pd.DataFrame({\n        'A': [1, 2, 3],\n        'B': ['a', 'b', 'c'],\n        'date': [pd.Timestamp('2022-01-01'), pd.Timestamp('2022-01-02'), pd.Timestamp('2022-01-03')]\n    }),\n    'nested_dict': {\n        'key1': 'value1',\n        'sub_dict': {\n            'sub_key': 'sub_value'\n        }\n    },\n    'none_value': None\n}\n\ntoml_representation = serialize_to_toml(data_sample)\nprint(toml_representation)\n\nname = \"John\"\n\nname = \"John\"\nage = 28\n\nage = 28\nis_student = False\n\nis_student = False\nscores = [85, 90, 78, 92]\n\nscores = [85, 90, 78, 92]\nbirthday = \"2000-01-01 00:00:00\"\n\nbirthday = \"2000-01-01 00:00:00\"\nmatrix = [[1 2], [3 4]]\n\n[df]\n[dataframe]\nA = [1, 2, 3]\nB = [\"a\", \"b\", \"c\"]\ndate = [\"2022-01-01 00:00:00\", \"2022-01-02 00:00:00\", \"2022-01-03 00:00:00\"]\n\n[nested_dict]\nkey1 = \"value1\"\n\nkey1 = \"value1\"\n[sub_dict]\nsub_key = \"sub_value\"\n\nsub_key = \"sub_value\"\n\n\nnone_value = null\n\nnone_value = null\n\n\n\nconfig = read_base_config()\nwith open(config['repro']['files']['dynamic'], 'r') as file:\n    dynamic_data = toml.load(file)\nprint(toml.dumps(dynamic_data))\n\n[p_value_str]\ndescription = \"The p-value of the coefficient on the slope of the linear regression line.\"\ntype = \"string\"\ntimestamp = \"2023-10-02T05:48:29.589004\"\nvalue = \"0.068\"\n\n[x]\ndescription = \"The simulated X data\"\nunits = \"kilograms\"\ntype = \"data\"\ntimestamp = \"2023-10-02T05:48:30.171394\"\ncontent_hash = \"38f13b81a58a7d931600e917d77dfe8f\"\ntimed_hash = \"653424a8be5d8ff5d5d6d9a38baeb26f\"\nvalue = \"array = [-0.15438854676085806, -0.5912841266673995, 1.3457620267806991, -0.3085476927297975, -0.35074090433304067, -1.343721369940541, -0.41860346256356656, 2.392890531248967, 0.22032854237060082, 0.7867023188803995, 0.08878384294999392, 0.6565087673201803, 0.2412729155438198, 0.6854353883101262, 2.153899580706892, 0.649925720150528, 1.127458119203137, -0.6357927443286684, 0.3077660698412044, -1.6328895355458346, 0.567227693439327, -0.21246173380662106, -0.7203897514131021, 0.5952129857137533, 0.18819499630282482, -0.8834998061258611, 0.7379945086294778, -0.8471634166162177, 0.07930983762624676, -0.10076438386878037, 0.4738798861563753, -0.10847987920496371, -1.16728052821831, 0.19401114268043276, -1.8697690072012825, -0.6079795737042001, -0.46088161234713115, 2.8744072140185186, 0.5779526555390606, 0.18642158999690325, -2.309463070393277, 0.9160646628168791, -0.036987499173112684, -0.6186664971219734, -0.7375207406586269, -0.3364114042058939, 0.6487550984010515, 0.7211593530346008, -3.0024570001024453, 0.20827750750261484, -0.9184527060704434, -0.5672153127477911, 0.31933453622980007, -0.37561851948771674, -0.11011613613998829, -2.5786876868233346, -2.2352575258690286, -0.14238353838147055, -0.7776623814911557, -0.12899276868200904, 0.821021437212202, 0.18632478617667347, 1.6469255261436233, 0.30333446984835577, -0.2888772687627644, 0.4875026119003026, 0.2806902509255848, -0.7998526623370962, 0.5301005871453163, 0.6998691293042977, -0.08461487877674735, -0.6322047366002711, -0.9348762425303966, -0.3857949711398192, 0.7758631517211686, 1.522836840694002, 0.25484897092674863, 2.0472839024926945, -0.548936278321665, 0.34845246870820656, -1.7722932107691587, 1.888704309449281, -1.1123418283924837, 1.3957453427395787, -0.8294367151092402, -1.1699534011438901, 1.0257270873514317, 0.7725006923281748, 0.3168385924779005, -0.30234878342901056, -0.1751641272612662, 0.3708234523019773, -2.3638133220013833, -0.4096668642141042, -0.4503293983368002, 0.03271836277038858, -1.4370887475738319, 0.19926882906384208, -0.08950771441073352, 0.4128495165175878]\\n\"\n\n[y]\ndescription = \"The simulated Y data\"\nunits = \"meters\"\ntype = \"data\"\ntimestamp = \"2023-10-02T05:48:30.593848\"\ncontent_hash = \"f8945d4c03988df0cd59c181035e86a9\"\ntimed_hash = \"621b8ede807a5bad8e2ac276732b619f\"\nvalue = \"array = [6.157526466969694, -9.302292211258417, -13.445653295124679, -8.631538800322812, 6.90483152433306, 5.207550454217913, 0.16281392537419195, 11.328419829563888, 22.478972058029154, 8.09134242274941, 5.073777096618679, 10.521865081855475, -16.790794925289998, -8.771064388620061, 4.0201332562739776, 5.117579323047639, 7.625083590549531, 3.8773345015463985, -3.928796702192886, -14.12618901867805, 15.719046636739415, -6.9901326969788835, -1.2697524315402995, 16.200579300476225, 4.653298124929337, 15.260286007217859, -8.66974802826228, 17.391748658118644, -11.979777143905922, -9.165369928333158, -10.066499099879193, 6.630265916533632, 5.597192274467069, 21.121094702481354, -0.37289209663747613, -10.093484219122008, -6.178013487751987, 4.612879529582713, -6.7221265756959445, 1.5429361341495342, -15.542297438913536, -6.9087508309560315, -5.756954497072782, 0.9567354246293611, -14.214770323986233, -12.709171551566424, 4.786356565840399, -4.890780892875197, -3.6073631505593395, 7.0359632267386765, -0.24241139306973603, -3.9167058403914647, 16.71776645328651, -14.815178430705346, -1.711860745824135, -10.08015043115352, -13.900633437259023, -27.590693317580115, 2.4225289380487824, 0.4100939029862429, -14.009201312069894, 26.99576623694627, 8.292226202794245, -16.51426094603318, -2.931299487241554, -3.06749774639879, -2.457980870324348, -11.765930634755847, -1.7957980955875312, 3.947583774063118, 1.7788813956475347, -1.513133427837522, 21.831572921844153, 7.891774924891347, -6.6299731645332045, 14.88059560881568, -14.321343993977925, 4.842025745064475, -18.45138246049829, -2.5286695131892367, 26.92858990370225, 14.990430393073257, -6.687320844036032, -6.3145713683066536, -1.865395572103326, 0.29997911599165183, 2.094399418593174, 5.231357076332482, -10.36763582996726, 1.6895152163357683, 6.181719576405759, -10.030869854369993, -14.337403366313984, 6.834137681527773, 7.186270591613762, -1.9468050084023705, 9.311246589228013, 0.08957849212100343, -4.817637123369896, 7.997470135737686]\\n\"\n\n[\"reproducible_plot.svg\"]\ndescription = \"A plot of X vs Y\"\ntype = \"file\"\ntimestamp = \"2023-10-02T05:48:31.073197\"\ncontent_hash = \"0b0d960e2a7606498a13a60389f9f360\"\ntimed_hash = \"10996cbe5ac2e5296f3736a4723753dc\"\n\n[test_var_timestamp_1]\ntype = \"string\"\ntimestamp = \"2023-10-02T05:50:16.028845\"\nvalue = \"67890\"\n\n[test_var_timestamp_2]\ntype = \"string\"\ntimestamp = \"2023-10-02T05:50:16.038555\"\nvalue = \"Hello again!\"\n\n\n\n\n# Test the save function\ntest_content = \"This is a test content for the save function.\"\n\n\nmetadata = save(test_content, \"saved_file.txt\")\nmetadata\n\n\n\n\nUpdated watched files to ['reproduce/main.md', 'reproduce/data.toml', 'reproduce/latex/template.tex', 'saved_file.txt']\n\n\n{'type': 'file',\n 'timestamp': '2023-10-02T02:11:11.082654',\n 'content_hash': 'd1866c6aa7d10eb57a35cc88a77802c5',\n 'timed_hash': 'f9293765bd6cc1e991407203aa7da511'}\n\n\n\n# Test\n#x = 10\n#y = \"Hello\"\n#z = [1, 2, 3]\n#save()"
  },
  {
    "objectID": "index copy.html",
    "href": "index copy.html",
    "title": "reproduce-work",
    "section": "",
    "text": "✅ Computational reproducibility across all major operating systems and platforms\n✅ A simple and intuitive API that fits into your existing workflow\n✅ Verifiable, traceable, reproducible results in scientific documents\n✅ Fancy PDF outputs"
  },
  {
    "objectID": "index copy.html#current-support",
    "href": "index copy.html#current-support",
    "title": "reproduce-work",
    "section": "Current support",
    "text": "Current support\n\nWorkflows\nAs of v0.0.1, reproduce.work has supprt for development/analysis workflows based on:\n\nPython\nJupyter notebooks\nR, RStudio\nJulia\npandoc\n\n\n\nTarget publishers and document formats\nPrimary outputs are currently PDF and HTML documents, with support for:\n\nLaTeX\nJupyter notebooks\nRMarkdown\npandoc markdown"
  },
  {
    "objectID": "index copy.html#install",
    "href": "index copy.html#install",
    "title": "reproduce-work",
    "section": "Install",
    "text": "Install\npip install reproduce_work"
  },
  {
    "objectID": "index copy.html#how-to-use",
    "href": "index copy.html#how-to-use",
    "title": "reproduce-work",
    "section": "How to use",
    "text": "How to use\n\nGetting started\n\nimport reproduce_work\nfrom reproduce_work.core import generate_config,read_base_config\nfrom reproduce_work.dynamic import publish_variable,publish_data,publish_file\n\nSetting reproduce.work config dir to ./reproduce\nSetting reproduce.work config dir to ./reproduce\n\n\nGenerate configuration at beginning of your project\n\ngenerate_config(inputs={\n    'authors': {\n        'author1': {\n            'name': 'Alex P. Miller',\n            'email': 'alex.miller@marshall.usc.edu',\n            'affiliation': 'USC Marshall School of Business'\n        }\n     },\n     'dev_image_tag': 'reproduce-work-dev',\n     #'verbose': True # enables print statements whenever data are updated/saved\n})\n\nSuccessfully generated reproduce.work configuration at reproduce/config.toml\nSuccessfully generated input file at reproduce/main.md\nSuccessfully generated latex template at reproduce/latex/template.tex\n\n\nRun code to analyze data and generate figures\n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\nplt.rcParams['figure.figsize'] = [6, 5]\n\nrandom_state = np.random.RandomState(552)\n\n# Generate data\nx = random_state.normal(size=100)\ny = 0.5*x + random_state.normal(scale=10, size=100)\n\n# Plot data with seaborn\nsns.set_style('white')\n\n# compute slope and stats\nslope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n# plot x-y scatter data\nx_y_plot = sns.scatterplot(x=x, y=y)\n\n# plot best fit line\nx_y_plot.plot(x, intercept + slope*x, color='black')\n\n# Compute p-value of slope \n# render p-value with 3 decimal places and no scientific notation\np_value_str = f'{p_value:.3f}'\n\n# add p-value and slope to plot\nx_y_plot.text(x=4.5, y=25, s='β')\nx_y_plot.text(x=4.75, y=20, s=f'p-value: {p_value_str}')\nx_y_plot.text(x=4.75, y=15, s=f'slope: {slope:.3f}')\nx_y_plot.text(x=4.75, y=10, s=f'intercept: {intercept:.3f}')\n\n# Set title\nx_y_plot.set_title('Reproducibly Simulated Data')\n\n# save figure\nplt.savefig('reproducible_plot.svg', bbox_inches='tight')\n\n\n\n\nThere are three primary types:\n\nnamed variables\n\ndefined via: reproduce_work.publish_variable\nDesigned to be used to facilitate production and review of reproducible results\n\ndata assignments\n\ndefined via: reproduce_work.publish_data\nDesigned to standardize data management and facilitate data validation\n\nfile assignments\n\ndefined via: reproduce_work.publish_file\nDesigned to standardize file management and facilitate file validation, allowing for reproducible workflows for arbitrarily complex data structures\n\n\n\npublish_variable(p_value_str, \"p_value_str\", metadata={\n    'description': 'The p-value of the coefficient on the slope of the linear regression line.',\n})\n\n\npublish_data(x, \"x\", metadata={\n    'description': 'The simulated X data',\n    'units': 'kilograms'\n})\n\n\npublish_data(y, \"y\", metadata={\n    'description': 'The simulated Y data',\n    'units': 'meters'\n})\n\n\npublish_file('reproducible_plot.svg', metadata={\n    'description': 'A plot of X vs Y',\n})\n\n\nbase_config = read_base_config()\nwith open(base_config['repro']['files']['dynamic'], 'r') as f:\n    print(f.read())\n\n[p_value_str]\ndescription = \"The p-value of the coefficient on the slope of the linear regression line.\"\ntype = \"string\"\ntimestamp = \"2023-10-02T09:39:49.549241\"\nvalue = \"0.068\"\n\n[x]\ndescription = \"The simulated X data\"\nunits = \"kilograms\"\ntype = \"data\"\ntimestamp = \"2023-10-02T09:39:49.570843\"\ncontent_hash = \"38f13b81a58a7d931600e917d77dfe8f\"\ntimed_hash = \"ca1b73c6c33f2d7ec93233d98207e7ce\"\nvalue = \"\"\"\narray = [-0.15438854676085806, -0.5912841266673995, 1.3457620267806991, -0.3085476927297975, -0.35074090433304067, -1.343721369940541, -0.41860346256356656, 2.392890531248967, 0.22032854237060082, 0.7867023188803995, 0.08878384294999392, 0.6565087673201803, 0.2412729155438198, 0.6854353883101262, 2.153899580706892, 0.649925720150528, 1.127458119203137, -0.6357927443286684, 0.3077660698412044, -1.6328895355458346, 0.567227693439327, -0.21246173380662106, -0.7203897514131021, 0.5952129857137533, 0.18819499630282482, -0.8834998061258611, 0.7379945086294778, -0.8471634166162177, 0.07930983762624676, -0.10076438386878037, 0.4738798861563753, -0.10847987920496371, -1.16728052821831, 0.19401114268043276, -1.8697690072012825, -0.6079795737042001, -0.46088161234713115, 2.8744072140185186, 0.5779526555390606, 0.18642158999690325, -2.309463070393277, 0.9160646628168791, -0.036987499173112684, -0.6186664971219734, -0.7375207406586269, -0.3364114042058939, 0.6487550984010515, 0.7211593530346008, -3.0024570001024453, 0.20827750750261484, -0.9184527060704434, -0.5672153127477911, 0.31933453622980007, -0.37561851948771674, -0.11011613613998829, -2.5786876868233346, -2.2352575258690286, -0.14238353838147055, -0.7776623814911557, -0.12899276868200904, 0.821021437212202, 0.18632478617667347, 1.6469255261436233, 0.30333446984835577, -0.2888772687627644, 0.4875026119003026, 0.2806902509255848, -0.7998526623370962, 0.5301005871453163, 0.6998691293042977, -0.08461487877674735, -0.6322047366002711, -0.9348762425303966, -0.3857949711398192, 0.7758631517211686, 1.522836840694002, 0.25484897092674863, 2.0472839024926945, -0.548936278321665, 0.34845246870820656, -1.7722932107691587, 1.888704309449281, -1.1123418283924837, 1.3957453427395787, -0.8294367151092402, -1.1699534011438901, 1.0257270873514317, 0.7725006923281748, 0.3168385924779005, -0.30234878342901056, -0.1751641272612662, 0.3708234523019773, -2.3638133220013833, -0.4096668642141042, -0.4503293983368002, 0.03271836277038858, -1.4370887475738319, 0.19926882906384208, -0.08950771441073352, 0.4128495165175878]\n\"\"\"\n\n[y]\ndescription = \"The simulated Y data\"\nunits = \"meters\"\ntype = \"data\"\ntimestamp = \"2023-10-02T09:39:49.595297\"\ncontent_hash = \"f8945d4c03988df0cd59c181035e86a9\"\ntimed_hash = \"158e94c7ed86a338cb12f36a6283aa45\"\nvalue = \"\"\"\narray = [6.157526466969694, -9.302292211258417, -13.445653295124679, -8.631538800322812, 6.90483152433306, 5.207550454217913, 0.16281392537419195, 11.328419829563888, 22.478972058029154, 8.09134242274941, 5.073777096618679, 10.521865081855475, -16.790794925289998, -8.771064388620061, 4.0201332562739776, 5.117579323047639, 7.625083590549531, 3.8773345015463985, -3.928796702192886, -14.12618901867805, 15.719046636739415, -6.9901326969788835, -1.2697524315402995, 16.200579300476225, 4.653298124929337, 15.260286007217859, -8.66974802826228, 17.391748658118644, -11.979777143905922, -9.165369928333158, -10.066499099879193, 6.630265916533632, 5.597192274467069, 21.121094702481354, -0.37289209663747613, -10.093484219122008, -6.178013487751987, 4.612879529582713, -6.7221265756959445, 1.5429361341495342, -15.542297438913536, -6.9087508309560315, -5.756954497072782, 0.9567354246293611, -14.214770323986233, -12.709171551566424, 4.786356565840399, -4.890780892875197, -3.6073631505593395, 7.0359632267386765, -0.24241139306973603, -3.9167058403914647, 16.71776645328651, -14.815178430705346, -1.711860745824135, -10.08015043115352, -13.900633437259023, -27.590693317580115, 2.4225289380487824, 0.4100939029862429, -14.009201312069894, 26.99576623694627, 8.292226202794245, -16.51426094603318, -2.931299487241554, -3.06749774639879, -2.457980870324348, -11.765930634755847, -1.7957980955875312, 3.947583774063118, 1.7788813956475347, -1.513133427837522, 21.831572921844153, 7.891774924891347, -6.6299731645332045, 14.88059560881568, -14.321343993977925, 4.842025745064475, -18.45138246049829, -2.5286695131892367, 26.92858990370225, 14.990430393073257, -6.687320844036032, -6.3145713683066536, -1.865395572103326, 0.29997911599165183, 2.094399418593174, 5.231357076332482, -10.36763582996726, 1.6895152163357683, 6.181719576405759, -10.030869854369993, -14.337403366313984, 6.834137681527773, 7.186270591613762, -1.9468050084023705, 9.311246589228013, 0.08957849212100343, -4.817637123369896, 7.997470135737686]\n\"\"\"\n\n[\"reproducible_plot.svg\"]\ndescription = \"A plot of X vs Y\"\ntype = \"file\"\ntimestamp = \"2023-10-02T09:39:49.670841\"\ncontent_hash = \"0b14eef9add06b8505520acd7f6ccf3b\"\ntimed_hash = \"046a70c27b541ed37d0ee6f17f9b7a02\"\n\n\n\nDecide which data, figures, and files to save for publication."
  },
  {
    "objectID": "dynamic copy.html",
    "href": "dynamic copy.html",
    "title": "dynamic",
    "section": "",
    "text": "2+2\n\n4\n\n\n\n\nrequires_config\n\n requires_config (func)\n\n\n\n\nvalidate_base_config\n\n validate_base_config (base_config)\n\n\n\n\nupdate_watched_files\n\n update_watched_files (add=[], remove=[])\n\n\n\n\nread_base_config\n\n read_base_config ()\n\n\n#generate_config()\n\n\n\n\nreproducible..wrapper\n\n reproducible.&lt;locals&gt;.wrapper (value, var_name)\n\n\n\n\nreproducible\n\n reproducible (var_assignment_func)\n\nA decorator to register the line number and timestamp when a variable is assigned.\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\nserialize_to_toml\n\n serialize_to_toml (data, root=True)\n\nUnified function to serialize various Python data types to TOML format.\n\n\n\nReproduceWorkEncoder\n\n ReproduceWorkEncoder (_dict=&lt;class 'dict'&gt;, preserve=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\ncheck_for_defintion_in_context\n\n check_for_defintion_in_context (function_name='save')\n\n\n\n\nget_cell_index\n\n get_cell_index ()\n\nGet the current cell index in a Jupyter notebook environment. If not in Jupyter, return None.\n\npublish_variable(67890, \"test_var_timestamp_1\")  # This should capture this line number and timestamp\npublish_variable(\"Hello again!\", \"test_var_timestamp_2\")  # And this line number and timestamp\n\nVAR_REGISTRY\n\n\n\n\nWARNING: value of test_var_timestamp_1 was not a string. Converted to string: 67890.\n\n\n\n\n\n{'test_var_timestamp_1': {'type': 'string',\n  'timestamp': '2023-10-02T02:11:07.000298',\n  'value': '67890'},\n 'test_var_timestamp_2': {'type': 'string',\n  'timestamp': '2023-10-02T02:11:07.016404',\n  'value': 'Hello again!'}}\n\n\n\n# Test the unified function\ndata_sample = {\n    'name': 'John',\n    'age': 28,\n    'is_student': False,\n    'scores': [85, 90, 78, 92],\n    'birthday': pd.Timestamp('2000-01-01'),\n    'matrix': np.array([[1, 2], [3, 4]]),\n    'df': pd.DataFrame({\n        'A': [1, 2, 3],\n        'B': ['a', 'b', 'c'],\n        'date': [pd.Timestamp('2022-01-01'), pd.Timestamp('2022-01-02'), pd.Timestamp('2022-01-03')]\n    }),\n    'nested_dict': {\n        'key1': 'value1',\n        'sub_dict': {\n            'sub_key': 'sub_value'\n        }\n    },\n    'none_value': None\n}\n\ntoml_representation = serialize_to_toml(data_sample)\nprint(toml_representation)\n\nname = \"John\"\nage = 28\nis_student = False\nscores = [85, 90, 78, 92]\nbirthday = \"2000-01-01 00:00:00\"\n[df]\n[dataframe]\nA = [1, 2, 3]\nB = [\"a\", \"b\", \"c\"]\ndate = [\"2022-01-01 00:00:00\", \"2022-01-02 00:00:00\", \"2022-01-03 00:00:00\"]\n\n[nested_dict]\nkey1 = \"value1\"\n[sub_dict]\nsub_key = \"sub_value\"\n\n\nnone_value = null\n\n\n\nconfig = read_base_config()\nprint(toml.dumps(VAR_REGISTRY))\n\n[test_var_timestamp_1]\ntype = \"string\"\ntimestamp = \"2023-10-02T02:11:07.000298\"\nvalue = \"67890\"\n\n[test_var_timestamp_2]\ntype = \"string\"\ntimestamp = \"2023-10-02T02:11:07.016404\"\nvalue = \"Hello again!\"\n\n\n\n\n# Test the save function\ntest_content = \"This is a test content for the save function.\"\n\n\nmetadata = save(test_content, \"saved_file.txt\")\nmetadata\n\n\n\n\nUpdated watched files to ['reproduce/main.md', 'reproduce/data.toml', 'reproduce/latex/template.tex', 'saved_file.txt']\n\n\n{'type': 'file',\n 'timestamp': '2023-10-02T02:11:11.082654',\n 'content_hash': 'd1866c6aa7d10eb57a35cc88a77802c5',\n 'timed_hash': 'f9293765bd6cc1e991407203aa7da511'}\n\n\n\n# Test\n#x = 10\n#y = \"Hello\"\n#z = [1, 2, 3]\n#save()"
  },
  {
    "objectID": "index copy 2.html",
    "href": "index copy 2.html",
    "title": "reproduce-work",
    "section": "",
    "text": "✅ Computational reproducibility across all major operating systems and platforms\n✅ A simple and intuitive API that fits into your existing workflow\n✅ Verifiable, traceable, reproducible results in scientific documents\n✅ Fancy PDF outputs"
  },
  {
    "objectID": "index copy 2.html#current-support",
    "href": "index copy 2.html#current-support",
    "title": "reproduce-work",
    "section": "Current support",
    "text": "Current support\n\nWorkflows\nAs of v0.0.1, reproduce.work has supprt for development/analysis workflows based on:\n\nPython\nJupyter notebooks\nR, RStudio\nJulia\npandoc\n\n\n\nTarget publishers and document formats\nPrimary outputs are currently PDF and HTML documents, with support for:\n\nLaTeX\nJupyter notebooks\nRMarkdown\npandoc markdown"
  },
  {
    "objectID": "index copy 2.html#install",
    "href": "index copy 2.html#install",
    "title": "reproduce-work",
    "section": "Install",
    "text": "Install\npip install reproduce_work"
  },
  {
    "objectID": "index copy 2.html#how-to-use",
    "href": "index copy 2.html#how-to-use",
    "title": "reproduce-work",
    "section": "How to use",
    "text": "How to use\n\nGetting started\n\nimport reproduce_work\nfrom reproduce_work.core import generate_config,read_base_config\nfrom reproduce_work.dynamic import publish_variable,publish_data,publish_file\n\nSetting reproduce.work config dir to ./reproduce\nSetting reproduce.work config dir to ./reproduce\n\n\nGenerate configuration at beginning of your project\n\ngenerate_config(inputs={\n    'authors': {\n        'author1': {\n            'name': 'Alex P. Miller',\n            'email': 'alex.miller@marshall.usc.edu',\n            'affiliation': 'USC Marshall School of Business'\n        }\n     },\n     'dev_image_tag': 'reproduce-work-dev',\n     #'verbose': True # enables print statements whenever data are updated/saved\n})\n\nSuccessfully generated reproduce.work configuration at reproduce/config.toml\nSuccessfully generated input file at reproduce/main.md\nSuccessfully generated latex template at reproduce/latex/template.tex\n\n\nRun code to analyze data and generate figures\n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\nplt.rcParams['figure.figsize'] = [6, 5]\n\nrandom_state = np.random.RandomState(552)\n\n# Generate data\nx = random_state.normal(size=100)\ny = 0.5*x + random_state.normal(scale=10, size=100)\n\n# Plot data with seaborn\nsns.set_style('white')\n\n# compute slope and stats\nslope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n# plot x-y scatter data\nx_y_plot = sns.scatterplot(x=x, y=y)\n\n# plot best fit line\nx_y_plot.plot(x, intercept + slope*x, color='black')\n\n# Compute p-value of slope \n# render p-value with 3 decimal places and no scientific notation\np_value_str = f'{p_value:.3f}'\n\n# add p-value and slope to plot\nx_y_plot.text(x=4.5, y=25, s='β')\nx_y_plot.text(x=4.75, y=20, s=f'p-value: {p_value_str}')\nx_y_plot.text(x=4.75, y=15, s=f'slope: {slope:.3f}')\nx_y_plot.text(x=4.75, y=10, s=f'intercept: {intercept:.3f}')\n\n# Set title\nx_y_plot.set_title('Reproducibly Simulated Data')\n\n# save figure\nplt.savefig('reproducible_plot.svg', bbox_inches='tight')\n\n\n\n\nThere are three primary types:\n\nnamed variables\n\ndefined via: reproduce_work.publish_variable\nDesigned to be used to facilitate production and review of reproducible results\n\ndata assignments\n\ndefined via: reproduce_work.publish_data\nDesigned to standardize data management and facilitate data validation\n\nfile assignments\n\ndefined via: reproduce_work.publish_file\nDesigned to standardize file management and facilitate file validation, allowing for reproducible workflows for arbitrarily complex data structures\n\n\n\npublish_variable(p_value_str, \"p_value_str\", metadata={\n    'description': 'The p-value of the coefficient on the slope of the linear regression line.',\n})\n\n\npublish_data(x, \"x\", metadata={\n    'description': 'The simulated X data',\n    'units': 'kilograms'\n})\n\n\npublish_data(y, \"y\", metadata={\n    'description': 'The simulated Y data',\n    'units': 'meters'\n})\n\n\npublish_file('reproducible_plot.svg', metadata={\n    'description': 'A plot of X vs Y',\n})\n\n\nbase_config = read_base_config()\nwith open(base_config['repro']['files']['dynamic'], 'r') as f:\n    print(f.read())\n\n[p_value_str]\ndescription = \"The p-value of the coefficient on the slope of the linear regression line.\"\ntype = \"string\"\ntimestamp = \"2023-10-02T09:39:49.549241\"\nvalue = \"0.068\"\n\n[x]\ndescription = \"The simulated X data\"\nunits = \"kilograms\"\ntype = \"data\"\ntimestamp = \"2023-10-02T09:39:49.570843\"\ncontent_hash = \"38f13b81a58a7d931600e917d77dfe8f\"\ntimed_hash = \"ca1b73c6c33f2d7ec93233d98207e7ce\"\nvalue = \"\"\"\narray = [-0.15438854676085806, -0.5912841266673995, 1.3457620267806991, -0.3085476927297975, -0.35074090433304067, -1.343721369940541, -0.41860346256356656, 2.392890531248967, 0.22032854237060082, 0.7867023188803995, 0.08878384294999392, 0.6565087673201803, 0.2412729155438198, 0.6854353883101262, 2.153899580706892, 0.649925720150528, 1.127458119203137, -0.6357927443286684, 0.3077660698412044, -1.6328895355458346, 0.567227693439327, -0.21246173380662106, -0.7203897514131021, 0.5952129857137533, 0.18819499630282482, -0.8834998061258611, 0.7379945086294778, -0.8471634166162177, 0.07930983762624676, -0.10076438386878037, 0.4738798861563753, -0.10847987920496371, -1.16728052821831, 0.19401114268043276, -1.8697690072012825, -0.6079795737042001, -0.46088161234713115, 2.8744072140185186, 0.5779526555390606, 0.18642158999690325, -2.309463070393277, 0.9160646628168791, -0.036987499173112684, -0.6186664971219734, -0.7375207406586269, -0.3364114042058939, 0.6487550984010515, 0.7211593530346008, -3.0024570001024453, 0.20827750750261484, -0.9184527060704434, -0.5672153127477911, 0.31933453622980007, -0.37561851948771674, -0.11011613613998829, -2.5786876868233346, -2.2352575258690286, -0.14238353838147055, -0.7776623814911557, -0.12899276868200904, 0.821021437212202, 0.18632478617667347, 1.6469255261436233, 0.30333446984835577, -0.2888772687627644, 0.4875026119003026, 0.2806902509255848, -0.7998526623370962, 0.5301005871453163, 0.6998691293042977, -0.08461487877674735, -0.6322047366002711, -0.9348762425303966, -0.3857949711398192, 0.7758631517211686, 1.522836840694002, 0.25484897092674863, 2.0472839024926945, -0.548936278321665, 0.34845246870820656, -1.7722932107691587, 1.888704309449281, -1.1123418283924837, 1.3957453427395787, -0.8294367151092402, -1.1699534011438901, 1.0257270873514317, 0.7725006923281748, 0.3168385924779005, -0.30234878342901056, -0.1751641272612662, 0.3708234523019773, -2.3638133220013833, -0.4096668642141042, -0.4503293983368002, 0.03271836277038858, -1.4370887475738319, 0.19926882906384208, -0.08950771441073352, 0.4128495165175878]\n\"\"\"\n\n[y]\ndescription = \"The simulated Y data\"\nunits = \"meters\"\ntype = \"data\"\ntimestamp = \"2023-10-02T09:39:49.595297\"\ncontent_hash = \"f8945d4c03988df0cd59c181035e86a9\"\ntimed_hash = \"158e94c7ed86a338cb12f36a6283aa45\"\nvalue = \"\"\"\narray = [6.157526466969694, -9.302292211258417, -13.445653295124679, -8.631538800322812, 6.90483152433306, 5.207550454217913, 0.16281392537419195, 11.328419829563888, 22.478972058029154, 8.09134242274941, 5.073777096618679, 10.521865081855475, -16.790794925289998, -8.771064388620061, 4.0201332562739776, 5.117579323047639, 7.625083590549531, 3.8773345015463985, -3.928796702192886, -14.12618901867805, 15.719046636739415, -6.9901326969788835, -1.2697524315402995, 16.200579300476225, 4.653298124929337, 15.260286007217859, -8.66974802826228, 17.391748658118644, -11.979777143905922, -9.165369928333158, -10.066499099879193, 6.630265916533632, 5.597192274467069, 21.121094702481354, -0.37289209663747613, -10.093484219122008, -6.178013487751987, 4.612879529582713, -6.7221265756959445, 1.5429361341495342, -15.542297438913536, -6.9087508309560315, -5.756954497072782, 0.9567354246293611, -14.214770323986233, -12.709171551566424, 4.786356565840399, -4.890780892875197, -3.6073631505593395, 7.0359632267386765, -0.24241139306973603, -3.9167058403914647, 16.71776645328651, -14.815178430705346, -1.711860745824135, -10.08015043115352, -13.900633437259023, -27.590693317580115, 2.4225289380487824, 0.4100939029862429, -14.009201312069894, 26.99576623694627, 8.292226202794245, -16.51426094603318, -2.931299487241554, -3.06749774639879, -2.457980870324348, -11.765930634755847, -1.7957980955875312, 3.947583774063118, 1.7788813956475347, -1.513133427837522, 21.831572921844153, 7.891774924891347, -6.6299731645332045, 14.88059560881568, -14.321343993977925, 4.842025745064475, -18.45138246049829, -2.5286695131892367, 26.92858990370225, 14.990430393073257, -6.687320844036032, -6.3145713683066536, -1.865395572103326, 0.29997911599165183, 2.094399418593174, 5.231357076332482, -10.36763582996726, 1.6895152163357683, 6.181719576405759, -10.030869854369993, -14.337403366313984, 6.834137681527773, 7.186270591613762, -1.9468050084023705, 9.311246589228013, 0.08957849212100343, -4.817637123369896, 7.997470135737686]\n\"\"\"\n\n[\"reproducible_plot.svg\"]\ndescription = \"A plot of X vs Y\"\ntype = \"file\"\ntimestamp = \"2023-10-02T09:39:49.670841\"\ncontent_hash = \"0b14eef9add06b8505520acd7f6ccf3b\"\ntimed_hash = \"046a70c27b541ed37d0ee6f17f9b7a02\"\n\n\n\nDecide which data, figures, and files to save for publication."
  }
]