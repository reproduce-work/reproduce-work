[
  {
    "objectID": "standards.html",
    "href": "standards.html",
    "title": "standards",
    "section": "",
    "text": "import os\nfrom dotenv import load_dotenv\nload_dotenv()\n\ndef check_reproduceworkdir():\n    \"\"\"\n    Check if REPRODUCEWORKDIR is defined and if not prompts the user to do so.\n    Check if the following files exist: ${REPRODUCEWORKDIR}/config.toml and the required fieids: ['repro', 'repro.input','project']\n    \"\"\"\n    # Check if REPRODUCEWORKDIR is defined\n    if 'REPRODUCEWORKDIR' not in os.environ:\n        print(\"REPRODUCEWORKDIR environment variable is not defined.\")\n        print(\"Please define it using the following command:\")\n        print(\"export REPRODUCEWORKDIR=/path/to/reproduceworkdir\")\n        return False\n    \n    # Check if the directory exists\n    if not os.path.isdir(os.environ['REPRODUCEWORKDIR']):\n        print(f\"{os.environ['REPRODUCEWORKDIR']} does not exist.\")\n        return False\n    \n    # Check if the config.toml file exists\n    config_file = os.path.join(os.environ['REPRODUCEWORKDIR'], 'config.toml')\n    if not os.path.isfile(config_file):\n        print(f\"{config_file} does not exist.\")\n        return False\n    \n    # Check if the required fields exist in the config.toml file\n    with open(config_file, 'r') as f:\n        config = f.read()\n    if 'repro' not in config:\n        print(\"repro field is missing in the config.toml file.\")\n        return False\n    if 'repro.input' not in config:\n        print(\"repro.input field is missing in the config.toml file.\")\n        return False\n    if 'project' not in config:\n        print(\"project field is missing in the config.toml file.\")\n        return False\n    \n    return True\n\n\nimport yaml\nimport hashlib\nimport os\nimport toml\n\ndef verify_metadata():\n    # Check if reproducibility.yml exists\n    config_path = Path(os.environ['REPRODUCEWORKDIR'], 'config.toml')\n    if not os.path.exists():\n        return False, f'Config file not found in required location: {config_path}'\n\n    with open(config_path, 'r') as f:\n        metadata = toml.safe_load(f)\n    \n    # Check software version (mocked for demonstration)\n    software_name = metadata['software'][0]['name']\n    \n    # Check dataset checksum\n    dataset_name = metadata['datasets'][0]['name']\n    expected_checksum = metadata['datasets'][0]['checksum']\n    \n    if not os.path.exists(dataset_name):\n        return False, f\"Dataset {dataset_name} not found.\"\n    \n    with open(dataset_name, 'rb') as f:\n        bytes = f.read()\n        readable_hash = hashlib.sha256(bytes).hexdigest()\n        \n    if f\"sha256:{readable_hash}\" != expected_checksum:\n        return False, \"Dataset checksum mismatch.\"\n    \n    # Check presence of instructions\n    instructions_path = metadata['instructions']['path']\n    if not os.path.exists(instructions_path):\n        return False, \"Instructions for reproduction not found.\"\n    \n    # Check for report file\n    report_file = metadata.get('report_file')\n    if report_file and not os.path.exists(report_file):\n        return False, f\"Report file {report_file} not found.\"\n    \n    # Check for repro.input field in config.toml\n    config_file = os.path.join(os.environ['REPRODUCEWORKDIR'], 'config.toml')\n    if not os.path.isfile(config_file):\n        return False, f\"{config_file} does not exist.\"\n    \n    with open(config_file, 'r') as f:\n        config = toml.load(f)\n    \n    if 'repro.input' not in config:\n        return False, \"repro.input field is missing in the config.toml file.\"\n    \n    # Check that all files in repro.input exist and are published in pubdata.toml\n    pubdata_file = os.path.join(os.environ['REPRODUCEWORKDIR'], 'pubdata.toml')\n    if not os.path.isfile(pubdata_file):\n        return False, f\"{pubdata_file} does not exist.\"\n    \n    with open(pubdata_file, 'r') as f:\n        pubdata = toml.load(f)\n    \n    for file in config['repro.input']:\n        if not os.path.exists(file):\n            return False, f\"{file} not found in repro.input.\"\n        \n        if file not in pubdata:\n            return False, f\"{file} not found in pubdata.toml.\"\n        \n        file_metadata = pubdata[file]\n        if 'hash' not in file_metadata or 'timed_hash' not in file_metadata:\n            return False, f\"{file} missing hash or timed_hash in pubdata.toml.\"\n        \n        generating_script = file_metadata.get('generating_script')\n        if generating_script and not os.path.exists(generating_script):\n            return False, f\"Generating script {generating_script} not found for {file}.\"\n    \n    return True, \"Verification successful.\"\n\n\n# Mocking the presence of metadata and dataset for testing\nwith open('reproducibility.yml', 'w') as f:\n    yaml.dump({\n        'software': [{'name': 'Python', 'version': '3.8.5'}],\n        'datasets': [{'name': 'sample_data.csv', 'checksum': 'sha256:abcd1234'}],\n        'execution_environment': {'docker_image': 'repo_name:latest'},\n        'instructions': {'path': 'REPRODUCE.md'}\n    }, f)\n\n# Creating a mock dataset and instructions file\nwith open('sample_data.csv', 'w') as f:\n    f.write('sample,data')\nwith open('REPRODUCE.md', 'w') as f:\n    f.write('# Reproduction Instructions\\nFollow these steps...')\n\n# Testing the verification script\nverify_metadata()\n\ndef docker_verification():\n    \"\"\"Check for the presence of Dockerfile or docker-compose.yml.\"\"\"\n    if os.path.exists('Dockerfile') or os.path.exists('docker-compose.yml'):\n        return True\n    return False\n\ndef further_enhanced_verify_metadata():\n    # Basic metadata checks\n    success, message = verify_metadata()\n    if not success:\n        return False, message\n    \n    # Docker verification\n    if not docker_verification():\n        return False, \"Neither Dockerfile nor docker-compose.yml found. Execution environment cannot be verified.\"\n    \n    return True, \"Verification successful.\"\n\n# Mocking the presence of Dockerfile for testing (you can also mock docker-compose.yml similarly)\n#with open('Dockerfile', 'w') as f:\n#    f.write('# Sample Dockerfile\\nFROM python:3.8.5')\n\n# Testing the further enhanced verification function\nfurther_enhanced_verify_metadata()\n\nNameError: name 'yaml' is not defined\n\n\n\nimport re\nimport toml\n\ndef parse_insert_patterns(report_file):\n    \"\"\"Parse the report.reproduce file to identify all instances of the \\INSERT{*} pattern.\"\"\"\n    \n    with open(report_file, 'r') as f:\n        content = f.read()\n    \n    # Find all \\INSERT patterns\n    patterns = re.findall(r'\\\\INSERT\\{(.*?)\\}', content)\n    \n    return patterns\n\n# Mocking the report.reproduce file for testing\nwith open('report.reproduce', 'w') as f:\n    f.write(\"This is a sample report with some variables like \\\\INSERT{var1} and \\\\INSERT{var2}.\")\n\n# Testing the parsing function\ninsert_patterns = parse_insert_patterns('report.reproduce')\ninsert_patterns\n\n\ndef verify_variables_against_pubdata(variables, pubdata_file):\n    \"\"\"Verify that each variable from the INSERT patterns is present in the pubdata.toml file.\"\"\"\n    \n    # Load the pubdata.toml file\n    pubdata = toml.load(pubdata_file)\n    \n    missing_variables = [var for var in variables if var not in pubdata]\n    \n    return len(missing_variables) == 0, missing_variables\n\n\n# Testing the verification function\nsuccess, missing_vars = verify_variables_against_pubdata(insert_patterns, 'pubdata.toml')\nsuccess, missing_vars\n\n\ndef replace_patterns_with_values(report_file, pubdata_file, output_file):\n    \"\"\"Replace the INSERT patterns in report.reproduce with corresponding values from pubdata.toml.\"\"\"\n    \n    # Load the pubdata.toml file\n    pubdata = toml.load(pubdata_file)\n    \n    with open(report_file, 'r') as f:\n        content = f.read()\n    \n    # Replace each pattern with its value from pubdata\n    for var, value in pubdata.items():\n        content = content.replace(f'\\\\INSERT{{{var}}}', str(value))\n    \n    # Save the replaced content to output_file\n    with open(output_file, 'w') as f:\n        f.write(content)\n\n\n# Testing the replacement function\nreplace_patterns_with_values('report.reproduce', 'pubdata.toml', 'report.tmp')\n\n# Displaying the report.tmp for verification\nwith open('report.tmp', 'r') as f:\n    replaced_content = f.read()\n\nreplaced_content\n\n\ndef compare_hashes(file1, file2):\n    \"\"\"Compare the SHA-256 hashes of two files.\"\"\"\n    \n    # Calculate hash for file1\n    with open(file1, 'rb') as f:\n        bytes = f.read()\n        hash_file1 = hashlib.sha256(bytes).hexdigest()\n    \n    # Calculate hash for file2\n    with open(file2, 'rb') as f:\n        bytes = f.read()\n        hash_file2 = hashlib.sha256(bytes).hexdigest()\n    \n    return hash_file1 == hash_file2\n\n# Mocking the report.auto and original report_file for testing\nwith open('report.auto', 'w') as f:\n    f.write(replaced_content)\nwith open('original_report_file', 'w') as f:\n    f.write(replaced_content)\n\n# Testing the hash comparison function\nhashes_match = compare_hashes('report.auto', 'original_report_file')\nhashes_match"
  },
  {
    "objectID": "dynamic.html",
    "href": "dynamic.html",
    "title": "dynamic",
    "section": "",
    "text": "requires_config\n\n requires_config (func)\n\n\n\n\nvalidate_base_config\n\n validate_base_config (base_config)\n\n\n\n\nupdate_watched_files\n\n update_watched_files (add=[], remove=[])\n\n\n\n\nread_base_config\n\n read_base_config ()\n\n\n\n\nset_default_dir\n\n set_default_dir ()\n\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\npublish_variable\n\n publish_variable (value, var_name, metadata={})\n\n\n\n\nreproducible\n\n reproducible (var_assignment_func)\n\nA decorator to register the line number and timestamp when a variable is assigned.\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\nReproduceWorkEncoder\n\n ReproduceWorkEncoder (_dict=&lt;class 'dict'&gt;, preserve=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nserialize_to_toml\n\n serialize_to_toml (data, root=True)\n\nUnified function to serialize various Python data types to TOML format.\n\n\n\nReproduceWorkEncoder\n\n ReproduceWorkEncoder (_dict=&lt;class 'dict'&gt;, preserve=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\ncheck_for_defintion_in_context\n\n check_for_defintion_in_context (function_name='save')\n\n\n\n\nget_cell_index\n\n get_cell_index ()\n\nGet the current cell index in a Jupyter notebook environment. If not in Jupyter, return None.\n\npublish_variable(67890, \"test_var_timestamp_1\")  # This should capture this line number and timestamp\npublish_variable(\"Hello again!\", \"test_var_timestamp_2\")  # And this line number and timestamp\n\nVAR_REGISTRY\n\n\n\n\nWARNING: value of test_var_timestamp_1 was not a string. Converted to string: 67890.\n\n\n\n\n\n{'test_var_timestamp_1': {'type': 'string',\n  'timestamp': '2023-10-02T11:20:32.483177',\n  'value': '67890'},\n 'test_var_timestamp_2': {'type': 'string',\n  'timestamp': '2023-10-02T11:20:32.506332',\n  'value': 'Hello again!'}}\n\n\n\n# Test the serialize_to_toml function\ndata_sample = {\n    'name': 'John',\n    'age': 28,\n    'is_student': False,\n    'scores': [85, 90, 78, 92],\n    'birthday': pd.Timestamp('2000-01-01'),\n    'matrix': np.array([[1, 2], [3, 4]]),\n    'df': pd.DataFrame({\n        'A': [1, 2, 3],\n        'B': ['a', 'b', 'c'],\n        'date': [pd.Timestamp('2022-01-01'), pd.Timestamp('2022-01-02'), pd.Timestamp('2022-01-03')]\n    }),\n    'nested_dict': {\n        'key1': 'value1',\n        'sub_dict': {\n            'sub_key': 'sub_value'\n        }\n    },\n    'none_value': None\n}\n\ntoml_representation = serialize_to_toml(data_sample)\nprint(toml_representation)\n\nname = \"John\"\nage = 28\nis_student = False\nscores = [85, 90, 78, 92]\nbirthday = \"2000-01-01 00:00:00\"\n[df]\n[dataframe]\nA = [1, 2, 3]\nB = [\"a\", \"b\", \"c\"]\ndate = [\"2022-01-01 00:00:00\", \"2022-01-02 00:00:00\", \"2022-01-03 00:00:00\"]\n\n[nested_dict]\nkey1 = \"value1\"\n[sub_dict]\nsub_key = \"sub_value\"\n\n\nnone_value = null\n\n\n\nconfig = read_base_config()\nwith open(config['repro']['files']['dynamic'], 'r') as file:\n    dynamic_data = toml.load(file)\nprint(toml.dumps(dynamic_data))\n\n[p_value_str]\ndescription = \"The p-value of the coefficient on the slope of the linear regression line.\"\ntype = \"string\"\ntimestamp = \"2023-10-02T10:25:50.962908\"\nvalue = \"0.068\"\n\n[x]\ndescription = \"The simulated X data\"\nunits = \"kilograms\"\ntype = \"data\"\ntimestamp = \"2023-10-02T10:25:51.146421\"\ncontent_hash = \"38f13b81a58a7d931600e917d77dfe8f\"\ntimed_hash = \"1ff88e55c506ce6249051526f0071e20\"\nvalue = \"array = [-0.15438854676085806, -0.5912841266673995, 1.3457620267806991, -0.3085476927297975, -0.35074090433304067, -1.343721369940541, -0.41860346256356656, 2.392890531248967, 0.22032854237060082, 0.7867023188803995, 0.08878384294999392, 0.6565087673201803, 0.2412729155438198, 0.6854353883101262, 2.153899580706892, 0.649925720150528, 1.127458119203137, -0.6357927443286684, 0.3077660698412044, -1.6328895355458346, 0.567227693439327, -0.21246173380662106, -0.7203897514131021, 0.5952129857137533, 0.18819499630282482, -0.8834998061258611, 0.7379945086294778, -0.8471634166162177, 0.07930983762624676, -0.10076438386878037, 0.4738798861563753, -0.10847987920496371, -1.16728052821831, 0.19401114268043276, -1.8697690072012825, -0.6079795737042001, -0.46088161234713115, 2.8744072140185186, 0.5779526555390606, 0.18642158999690325, -2.309463070393277, 0.9160646628168791, -0.036987499173112684, -0.6186664971219734, -0.7375207406586269, -0.3364114042058939, 0.6487550984010515, 0.7211593530346008, -3.0024570001024453, 0.20827750750261484, -0.9184527060704434, -0.5672153127477911, 0.31933453622980007, -0.37561851948771674, -0.11011613613998829, -2.5786876868233346, -2.2352575258690286, -0.14238353838147055, -0.7776623814911557, -0.12899276868200904, 0.821021437212202, 0.18632478617667347, 1.6469255261436233, 0.30333446984835577, -0.2888772687627644, 0.4875026119003026, 0.2806902509255848, -0.7998526623370962, 0.5301005871453163, 0.6998691293042977, -0.08461487877674735, -0.6322047366002711, -0.9348762425303966, -0.3857949711398192, 0.7758631517211686, 1.522836840694002, 0.25484897092674863, 2.0472839024926945, -0.548936278321665, 0.34845246870820656, -1.7722932107691587, 1.888704309449281, -1.1123418283924837, 1.3957453427395787, -0.8294367151092402, -1.1699534011438901, 1.0257270873514317, 0.7725006923281748, 0.3168385924779005, -0.30234878342901056, -0.1751641272612662, 0.3708234523019773, -2.3638133220013833, -0.4096668642141042, -0.4503293983368002, 0.03271836277038858, -1.4370887475738319, 0.19926882906384208, -0.08950771441073352, 0.4128495165175878]\\n\"\n\n[y]\ndescription = \"The simulated Y data\"\nunits = \"meters\"\ntype = \"data\"\ntimestamp = \"2023-10-02T10:25:51.678260\"\ncontent_hash = \"f8945d4c03988df0cd59c181035e86a9\"\ntimed_hash = \"a306a63a68be7c4f84373afa6f4aee18\"\nvalue = \"array = [6.157526466969694, -9.302292211258417, -13.445653295124679, -8.631538800322812, 6.90483152433306, 5.207550454217913, 0.16281392537419195, 11.328419829563888, 22.478972058029154, 8.09134242274941, 5.073777096618679, 10.521865081855475, -16.790794925289998, -8.771064388620061, 4.0201332562739776, 5.117579323047639, 7.625083590549531, 3.8773345015463985, -3.928796702192886, -14.12618901867805, 15.719046636739415, -6.9901326969788835, -1.2697524315402995, 16.200579300476225, 4.653298124929337, 15.260286007217859, -8.66974802826228, 17.391748658118644, -11.979777143905922, -9.165369928333158, -10.066499099879193, 6.630265916533632, 5.597192274467069, 21.121094702481354, -0.37289209663747613, -10.093484219122008, -6.178013487751987, 4.612879529582713, -6.7221265756959445, 1.5429361341495342, -15.542297438913536, -6.9087508309560315, -5.756954497072782, 0.9567354246293611, -14.214770323986233, -12.709171551566424, 4.786356565840399, -4.890780892875197, -3.6073631505593395, 7.0359632267386765, -0.24241139306973603, -3.9167058403914647, 16.71776645328651, -14.815178430705346, -1.711860745824135, -10.08015043115352, -13.900633437259023, -27.590693317580115, 2.4225289380487824, 0.4100939029862429, -14.009201312069894, 26.99576623694627, 8.292226202794245, -16.51426094603318, -2.931299487241554, -3.06749774639879, -2.457980870324348, -11.765930634755847, -1.7957980955875312, 3.947583774063118, 1.7788813956475347, -1.513133427837522, 21.831572921844153, 7.891774924891347, -6.6299731645332045, 14.88059560881568, -14.321343993977925, 4.842025745064475, -18.45138246049829, -2.5286695131892367, 26.92858990370225, 14.990430393073257, -6.687320844036032, -6.3145713683066536, -1.865395572103326, 0.29997911599165183, 2.094399418593174, 5.231357076332482, -10.36763582996726, 1.6895152163357683, 6.181719576405759, -10.030869854369993, -14.337403366313984, 6.834137681527773, 7.186270591613762, -1.9468050084023705, 9.311246589228013, 0.08957849212100343, -4.817637123369896, 7.997470135737686]\\n\"\n\n[\"reproducible_plot.svg\"]\ndescription = \"A plot of X vs Y\"\ntype = \"file\"\ntimestamp = \"2023-10-02T10:25:52.305297\"\ncontent_hash = \"bb296f59053ba6d7cccea638b3edcf52\"\ntimed_hash = \"09b3a1eaf7be868f20636e0ce8325570\"\n\n[test_var_timestamp_1]\ntype = \"string\"\ntimestamp = \"2023-10-02T11:20:32.483177\"\nvalue = \"67890\"\n\n[test_var_timestamp_2]\ntype = \"string\"\ntimestamp = \"2023-10-02T11:20:32.506332\"\nvalue = \"Hello again!\"\n\n\n\n\n# Test the save function\ntest_content = \"This is a test content for the save function.\"\n\n\nmetadata = save(test_content, \"saved_file.txt\")\nmetadata\n\n\n\n\nUpdated watched files to ['reproduce/main.md', 'reproduce/data.toml', 'reproduce/latex/template.tex', 'saved_file.txt']\n\n\n{'type': 'file',\n 'timestamp': '2023-10-02T02:11:11.082654',\n 'content_hash': 'd1866c6aa7d10eb57a35cc88a77802c5',\n 'timed_hash': 'f9293765bd6cc1e991407203aa7da511'}\n\n\n\n# Test\n#x = 10\n#y = \"Hello\"\n#z = [1, 2, 3]\n#save()"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "test_validate_base_config\n\n test_validate_base_config ()\n\n\n\n\ngenerate_config\n\n generate_config (inputs={}, version='reproduce.work/v1/default')\n\n\n\n\nReproduceWorkEncoder\n\n ReproduceWorkEncoder (_dict=&lt;class 'dict'&gt;, preserve=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nrequires_config\n\n requires_config (func)\n\n\n\n\nvalidate_base_config\n\n validate_base_config (base_config, quiet=False)\n\n\n\n\nread_base_config\n\n read_base_config ()\n\n\n\n\nset_default_dir\n\n set_default_dir ()\n\n\nbase_config = {\n        'authors': {\n            'author1.name': 'Alex P. Miller',\n            'author1.affiliation': 'USC Marshall School of Business',\n            'author1.email': 'alex.miller@marshall.usc.edu'\n        },\n        'repro': {\n            'version': 'reproduce.work/v1/default',\n            'stages': ['init', 'develop', 'build']\n        },\n        'repro.files': {\n            'input': 'document/main.md',\n            'dynamic': 'document/pubdata.toml',\n            'latex_template': 'document/latex/template.tex',\n            'output': 'document/latex/compiled.tex'\n        },\n        'repro.stage.init': {\n            'script': 'docker build -t {dev_image_tag} .\\ndocker build -t tinytex {reproduce_dir}/Dockerfile.tinytex\\ndocker build -t watcher {reproduce_dir}/Dockerfile.watch\\n'\n        },\n        'repro.stage.develop': {\n            'script': 'docker run -v $(pwd):/home/jovyan -p 8888:8888 {dev_image_tag} start.sh jupyter lab --LabApp.token=\\'\\'\\n\\\\INSERT{watch_cmd_here}\\n'\n        },\n        'repro.stage.build': {\n            'script': 'docker run --rm -i -v $(pwd):/home/jovyan -p 8888:8888 {dev_image_tag} python reproduce_work.build() # this replaces instances of \\\\INSERT{var} in `input` file\\ndocker run --rm -i -v $(pwd):/home lowdown # this converts the markdown to latex\\ndocker run --rm -i --net=none -v $(pwd):/home tinytex sh -c \"cd /home/document/latex && xelatex compiled.tex\" # this compiles the latex\\n'\n        }\n    }\nvalidate_base_config(base_config)\n\nTrue\n\n\n\n\n\nupdate_watched_files\n\n update_watched_files (add=[], remove=[])\n\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\npublish_variable\n\n publish_variable (value, var_name, metadata={})\n\n\n\n\nreproducible\n\n reproducible (var_assignment_func)\n\nA decorator to register the line number and timestamp when a variable is assigned.\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\nrequires_config..wrapper\n\n requires_config.&lt;locals&gt;.wrapper (*args, **kwargs)\n\n\n\n\nReproduceWorkEncoder\n\n ReproduceWorkEncoder (_dict=&lt;class 'dict'&gt;, preserve=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nserialize_to_toml\n\n serialize_to_toml (data, root=True)\n\nUnified function to serialize various Python data types to TOML format.\n\n\n\nReproduceWorkEncoder\n\n ReproduceWorkEncoder (_dict=&lt;class 'dict'&gt;, preserve=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\ncheck_for_defintion_in_context\n\n check_for_defintion_in_context (function_name='save')\n\n\n\n\nget_cell_index\n\n get_cell_index ()\n\nGet the current cell index in a Jupyter notebook environment. If not in Jupyter, return None.\n\npublish_data(67890, \"test_var_timestamp_1\")  # This should capture this line number and timestamp\npublish_data(\"Hello again!\", \"test_var_timestamp_2\")  # And this line number and timestamp\n\nVAR_REGISTRY\n\n{'REPROWORK_REMOTE_URL': None, 'REPROWORK_ACTIVE_NOTEBOOK': None}\n\n\n\n# Test the serialize_to_toml function\ndata_sample = {\n    'name': 'John',\n    'age': 28,\n    'is_student': False,\n    'scores': [85, 90, 78, 92],\n    'birthday': pd.Timestamp('2000-01-01'),\n    'matrix': np.array([[1, 2], [3, 4]]),\n    'df': pd.DataFrame({\n        'A': [1, 2, 3],\n        'B': ['a', 'b', 'c'],\n        'date': [pd.Timestamp('2022-01-01'), pd.Timestamp('2022-01-02'), pd.Timestamp('2022-01-03')]\n    }),\n    'nested_dict': {\n        'key1': 'value1',\n        'sub_dict': {\n            'sub_key': 'sub_value'\n        }\n    },\n    'none_value': None\n}\n\ntoml_representation = serialize_to_toml(data_sample)\nprint(toml_representation)\n\nname = \"John\"\nage = 28\nis_student = False\nscores = [85, 90, 78, 92]\nbirthday = \"2000-01-01 00:00:00\"\n[df]\n[dataframe]\nA = [1, 2, 3]\nB = [\"a\", \"b\", \"c\"]\ndate = [\"2022-01-01 00:00:00\", \"2022-01-02 00:00:00\", \"2022-01-03 00:00:00\"]\n\n[nested_dict]\nkey1 = \"value1\"\n[sub_dict]\nsub_key = \"sub_value\"\n\n\nnone_value = null"
  },
  {
    "objectID": "paper.html",
    "href": "paper.html",
    "title": "paper",
    "section": "",
    "text": "from reproduce_work import *\n\nSetting reproduce.work config dir to ./reproduce\n[au]\n\"author1.name\" = \"Alex P. Miller\"\n\"author1.affiliation\" = \"USC Marshall School of Business\"\n\"author1.email\" = \"alex.miller@marshall.usc.edu\"\n\n[repro]\nversion = \"reproduce.work/v1/default\"\nstages = [ \"init\", \"develop\", \"build\",]\n\n[\"repro.files\"]\ninput = \"document/main.md\"\ndynamic = \"document/pubdata.toml\"\nlatex_template = \"document/latex/template.tex\"\noutput = \"document/latex/compiled.tex\"\n\n[\"repro.stage.init\"]\nscript = \"docker build -t {dev_image_tag} .\\ndocker build -t tinytex {reproduce_dir}/Dockerfile.tinytex\\ndocker build -t watcher {reproduce_dir}/Dockerfile.watch\\n\"\n\n[\"repro.stage.develop\"]\nscript = \"docker run -v $(pwd):/home/jovyan -p 8888:8888 {dev_image_tag} start.sh jupyter lab --LabApp.token=''\\n\\\\INSERT{watch_cmd_here}\\n\"\n\n[\"repro.stage.build\"]\nscript = \"docker run --rm -i -v $(pwd):/home/jovyan -p 8888:8888 {dev_image_tag} python reproduce_work.build() # this replaces instances of \\\\INSERT{var} in `input` file\\ndocker run --rm -i -v $(pwd):/home lowdown # this converts the markdown to latex\\ndocker run --rm -i --net=none -v $(pwd):/home tinytex sh -c \\\"cd /home/document/latex && xelatex compiled.tex\\\" # this compiles the latex\\n\"\n\nError: Missing required field 'authors' in config.toml\nAll tests passed!\nSetting reproduce.work config dir to ./reproduce\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\nimport statsmodels.api as sm\n\nrandom_state = np.random.RandomState(2353)\n\n# 1. Generating Data\n# Generate 1000 random samples from a standard normal distribution for x-axis\nx = random_state.randn(1000)\n# Generate 1000 random samples from a gamma distribution for y-axis\n# We'll use shape=2 and scale=1 for the gamma distribution as an example.\ny = random_state.gamma(2, 1, 1000)\n# add noise\nu, v = random_state.randn(1000), random_state.randn(1000)\ny = y + 0.3*(x + u) + 3*v\n\n\n\n#plt.style.use('seaborn-whitegrid')\n\n# 2. Scatter Plot\n# Create a main figure and axes\nfig = plt.figure(figsize=(8, 8))\n# Define the proportions of the scatter plot and histograms\nscatter_ax = plt.axes([0.2, 0.2, 0.6, 0.6])  # [left, bottom, width, height]\nx_hist_ax = plt.axes([0.2, 0.05, 0.6, 0.15], sharex=scatter_ax)\ny_hist_ax = plt.axes([0.05, 0.2, 0.15, 0.6], sharey=scatter_ax)\n\n# Plot the scatter plot\nscatter_ax.scatter(x, y, alpha=0.5)\nscatter_ax.set_xlabel('Normal Distribution')\nscatter_ax.set_ylabel('Gamma Distribution')\n\n# 3. Histograms\n# Plot the histogram for x-values\nx_hist_ax.hist(x, bins=50, edgecolor='k', alpha=0.6, color='blue', orientation='vertical')\nx_hist_ax.set_ylabel(' ')\nx_hist_ax.set_title(' ')\n# Add ticks at 0, 30, 60 for the frequency axis\nx_hist_ax.set_yticks([0, 20, 40])\nx_hist_ax.set_yticklabels([0, 20, 40])\n\n# Plot the rotated histogram for y-values\ny_hist_ax.hist(y, bins=50, edgecolor='k', alpha=0.6, color='red', orientation='horizontal')\ny_hist_ax.set_title(' ')\n\n# Remove ticks from the histograms\nx_hist_ax.xaxis.set_tick_params(which='both', size=0)\nx_hist_ax.yaxis.set_tick_params(which='both', size=0)\ny_hist_ax.xaxis.set_tick_params(which='both', size=0)\ny_hist_ax.yaxis.set_tick_params(which='both', size=0)\n\n\n# Adjustments to the previous visualization:\n\n# 1. Flipping the y-data histogram so that left corresponds to higher frequencies.\ny_hist_ax.clear()  # Clear the previous histogram\ny_hist_ax.hist(y, bins=50, edgecolor='k', alpha=0.6, color='red', orientation='horizontal')\ny_hist_ax.invert_xaxis()  # Invert the x-axis to achieve the desired flipping\ny_hist_ax.set_xlabel('Frequency')\n\n# 2. For the scatter plot, use circle markers with the color purple\nscatter_ax.clear()  # Clear the previous scatter plot\nscatter_ax.scatter(x, y, s=15, alpha=0.5, c='purple', marker='o')\nscatter_ax.set_xlabel('Normal Distribution')\nscatter_ax.set_ylabel('Gamma Distribution')\n\n\n\n# compute slope and stats\n# perform OLS regression\nX = sm.add_constant(x)\nmodel = sm.OLS(y, X).fit()\nmodel_summary = (\n    model\n    .summary()\n    .tables[1]\n    .as_latex_tabular()\n    .replace('\\n', ' ')\n    .replace('const', '$\\\\alpha$')\n    .replace('x1', '$\\\\beta$')\n)\npublish_data(\n    model_summary, 'ols_model_summary',\n    metadata={\n        'description': 'OLS Model Summary from regression of y on x',\n        'badge': 'reproduce-work-logo'\n    }\n)\n\n# extract coefficients and p-values\nalpha, beta = model.params\np_alpha, p_beta = model.pvalues\np_alpha_str = f'{p_alpha:.3f}'\np_beta_str = f'{p_beta:.3f}'\n\nscatter_ax.plot(x, alpha + beta*x, color='black', lw=4)\n\n\n# Add ticks at 0, 30, 60 for the frequency axis\ny_hist_ax.set_xticks([5, 30, 60])\ny_hist_ax.set_xticklabels([0, 30, 60])\n\n# Set a white background with grid\nfor ax in [scatter_ax, x_hist_ax, y_hist_ax]:\n    ax.set_facecolor('white')\n    ax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n\n# add p-value and slope to plot\n# alpha\nscatter_ax.text(x=-1.5, y=14, s='y = α + β x + u', size=16)\n\n# Add the SVG to the plot in the bottom right corner\n\nplt.title('A concept for a verifiably reproducible scatter plot', size=15, pad=10, x=2.1, y=1.01)\n# Display the updated plot\nplt.show()\n\n\n\n\n\n# save the figure\nfig.savefig('nbs/img/scatter_plot.pdf', format='pdf', dpi=1200, bbox_inches='tight')\n\n\npublish_file('nbs/img/scatter_plot.pdf', metadata={\n    'description': 'Scatter plot with OLS model line from regression of y on x',\n    'badge': 'reproduce-work-logo'\n})\n\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xac in position 10: invalid start byte\n\n\n\nimport os\nos.getcwd()\n\n'/home/jovyan'"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "reproduce.work",
    "section": "",
    "text": "📦  sci-dev-kit ⬇️ \n\n\n\n\n\n\n📃  reproduce.work paper\n\n\n\n\n\n\n📀\n\nreproduce_work   python package"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "reproduce.work",
    "section": "Introduction",
    "text": "Introduction\nreproduce.work is a set of standards, software, and people aligned for the purpose of scientific reproducibility. These components are all independent but work most effectively together:\n\nA set of standards for the structure of a computationally reproducible project for scientific publishing.\nA set of software development tools (that currently works with Python, Jupyter, and VSCode based workflows) which make it easy to create, validate, and publish reproducible projects.\n\nThis tooling is based on Docker and allows you to use any code and nearly program for your work, while ensuring that your work is reproducible.\nWe currenlty support authorship in any text-based, markdown, or notebook based environment\n🖋️ seemless, full-powered LaTeX support (not just MathJax, folks)\n🔁 auto-compiled PDFs, triggered by file changes\n🧰 cross-platform reproducibility\n\nA group of people who support the devlopment of these tools and the adoption of these standards."
  },
  {
    "objectID": "index.html#at-a-glance",
    "href": "index.html#at-a-glance",
    "title": "reproduce.work",
    "section": "At a glance",
    "text": "At a glance\n\nMain features:\n\n✅ Computational reproducibility standards that work across all major platforms\n✅ A Python notebook-oriented workflow for publishing reproducible projects\n✅ A simple and intuitive API that fits into your existing workflow\n✅ Verifiable, traceable, reproducible results in scientific documents\n\n\n\nRoadmap features:\n\n🔳 Fancy HTML outputs\n🔳 Data validation, versioning, and provenance tracking\n🔳 Support for more target publishers and document formats\n🔳 Deep linking to verified open data and code\n\n\n\n\nPhilosophy\nThe objective of this software is to facilitate a version open science with reproducibility of computational results in published scientific work. The software is developed to integrate with existing computing paradigms and development workflows, including any docker-targeted build system. The goal is to accomodate the vast space of computation and logic that counts as “scientific computing” while providing a framework that constrains the core essence of scientific publishing to an ontology that facilitates and encourages reproducibile practices for humans both producing and consuming science."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "reproduce.work",
    "section": "Installation",
    "text": "Installation\nRequires Docker or suitable drop-in replacement such as OrbStack. See Docker requirement for more details.\n\nPython-based workflow\nTo incorporate reproduce.work elements into your Python-based workflow, simply install the package or include it in your requirements.txt and rebuild your project.\npip install reproduce_work"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "reproduce.work",
    "section": "How to use",
    "text": "How to use\n\nGetting started\n\nimport os\nfrom pathlib import Path\nos.chdir(Path.home())\nimport reproduce_work\nfrom reproduce_work.core import generate_config,read_base_config\nfrom reproduce_work.dynamic import publish_variable,publish_data,publish_file,register_notebook\n\nSetting reproduce.work config dir to ./reproduce\nSetting reproduce.work config dir to ./reproduce\n\n\nGenerate configuration at beginning of your project\n\ngenerate_config(inputs={\n    'authors': {\n        'author1': {\n            'name': 'Alex P. Miller',\n            'email': 'alex.miller@marshall.usc.edu',\n            'affiliation': 'USC Marshall School of Business'\n        }\n     },\n     'project': {\n        'full_title': '\\\\\\\\texttt{reproduce.work}: A framework to facilitate cross-platform computational reproducibility in scientific publishing',\n        'abstract': 'In metascience, computational reproduction is the process of reproducing the results of a scientific paper using the data and code provided by the authors of the paper. This subject sits within the broader context of \"reproducibility\" in scientific  research, which has been core to the philosophy of science for decades. However, the practice of science has fallen woefully short of meeting even basic standards toward true and widespread reproducibility. In this project, we focus primarily on addressing the narrow problem of computational reproducibility. We propose a framework for facilitating computational reproducibility in scientific publishing, which we call reproduce.work. The reproducibility standards are designed to be cross-platform and to work with any programming language. We highlight the distinction between open and reproducibile practices and showcase how our software framework encourages both simultaneously. The results of this very paper can be reproduced on any machine that can execute a containerized image using the reproduce.work workflow. We conclude by discussing the potential of the framework for improving rigor and fidelity of computational science for both producers and consumers of published work.',\n        'github_repo': 'reproduce-work/reproduce-work',\n     },\n     'nbdev_project': True,\n     'dev_image_tag': 'reproduce-work-dev',\n     #'verbose': True # enables print statements whenever data are updated/saved\n})\n\nSuccessfully generated reproduce.work configuration at reproduce/config.toml\n\n\n\nregister_notebook('index.ipynb')\n\nTrue\n\n\nRun code to analyze data and generate figures\n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\nplt.rcParams['figure.figsize'] = [6, 5]\n\nrandom_state = np.random.RandomState(552)\n\n# Generate data\nx = random_state.normal(size=100)\ny = 0.5*x + random_state.normal(scale=10, size=100)\n\n# Plot data with seaborn\nsns.set_style('white')\n\n# compute slope and stats\nslope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n# plot x-y scatter data\nx_y_plot = sns.scatterplot(x=x, y=y)\n\n# plot best fit line\nx_y_plot.plot(x, intercept + slope*x, color='black')\n\n# Compute p-value of slope \n# render p-value with 3 decimal places and no scientific notation\np_value_str = f'{p_value:.3f}'\n\n# add p-value and slope to plot\nx_y_plot.text(x=4.5, y=25, s='β')\nx_y_plot.text(x=4.75, y=20, s=f'p-value: {p_value_str}')\nx_y_plot.text(x=4.75, y=15, s=f'slope: {slope:.3f}')\nx_y_plot.text(x=4.75, y=10, s=f'intercept: {intercept:.3f}')\n\n# Set title\nx_y_plot.set_title('Reproducibly Simulated Data')\n\n# save figure\nplt.savefig('reproducible_plot.svg', bbox_inches='tight')\n_ = x_y_plot\n\n\n\n\nThere are three primary types:\n\ndata assignments\n\ndefined via: reproduce_work.publish_data\nDesigned to standardize data management and facilitate data validation\n\nfile assignments\n\ndefined via: reproduce_work.publish_file\nDesigned to standardize file management and facilitate file validation, allowing for reproducible workflows for arbitrarily complex data structures\n\n\n\npublish_variable(p_value_str, \"p_value_str\", metadata={\n    'description': 'The p-value of the coefficient on the slope of the linear regression line.',\n})\n\n\npublish_data(x, \"x\", metadata={\n    'description': 'The simulated X data',\n    'units': 'kilograms'\n})\n\n\npublish_data(y, \"y\", metadata={\n    'description': 'The simulated Y data',\n    'units': 'meters'\n})\n\n\npublish_file('reproducible_plot.svg', metadata={\n    'description': 'A plot of X vs Y',\n})\n\n\n\n\n\nbase_config = read_base_config()\nwith open(base_config['repro']['files']['dynamic'], 'r') as f:\n    print(f.read())\n\n[p_value_str]\ndescription = \"The p-value of the coefficient on the slope of the linear regression line.\"\ntype = \"string\"\ntimestamp = \"2023-10-04T00:28:57.015843\"\nvalue = \"0.068\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\n\n[x]\ndescription = \"The simulated X data\"\nunits = \"kilograms\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\ntype = \"data\"\ntimestamp = \"2023-10-04T00:28:57.318975\"\ncontent_hash = \"38f13b81a58a7d931600e917d77dfe8f\"\ntimed_hash = \"b03c04b751b612da11eac5f1ecb6557b\"\nvalue = [ \"-0.15438854676085806\", \"-0.5912841266673995\", \"1.3457620267806991\", \"-0.3085476927297975\", \"-0.35074090433304067\", \"-1.343721369940541\", \"-0.41860346256356656\", \"2.392890531248967\", \"0.22032854237060082\", \"0.7867023188803995\", \"0.08878384294999392\", \"0.6565087673201803\", \"0.2412729155438198\", \"0.6854353883101262\", \"2.153899580706892\", \"0.649925720150528\", \"1.127458119203137\", \"-0.6357927443286684\", \"0.3077660698412044\", \"-1.6328895355458346\", \"0.567227693439327\", \"-0.21246173380662106\", \"-0.7203897514131021\", \"0.5952129857137533\", \"0.18819499630282482\", \"-0.8834998061258611\", \"0.7379945086294778\", \"-0.8471634166162177\", \"0.07930983762624676\", \"-0.10076438386878037\", \"0.4738798861563753\", \"-0.10847987920496371\", \"-1.16728052821831\", \"0.19401114268043276\", \"-1.8697690072012825\", \"-0.6079795737042001\", \"-0.46088161234713115\", \"2.8744072140185186\", \"0.5779526555390606\", \"0.18642158999690325\", \"-2.309463070393277\", \"0.9160646628168791\", \"-0.036987499173112684\", \"-0.6186664971219734\", \"-0.7375207406586269\", \"-0.3364114042058939\", \"0.6487550984010515\", \"0.7211593530346008\", \"-3.0024570001024453\", \"0.20827750750261484\", \"-0.9184527060704434\", \"-0.5672153127477911\", \"0.31933453622980007\", \"-0.37561851948771674\", \"-0.11011613613998829\", \"-2.5786876868233346\", \"-2.2352575258690286\", \"-0.14238353838147055\", \"-0.7776623814911557\", \"-0.12899276868200904\", \"0.821021437212202\", \"0.18632478617667347\", \"1.6469255261436233\", \"0.30333446984835577\", \"-0.2888772687627644\", \"0.4875026119003026\", \"0.2806902509255848\", \"-0.7998526623370962\", \"0.5301005871453163\", \"0.6998691293042977\", \"-0.08461487877674735\", \"-0.6322047366002711\", \"-0.9348762425303966\", \"-0.3857949711398192\", \"0.7758631517211686\", \"1.522836840694002\", \"0.25484897092674863\", \"2.0472839024926945\", \"-0.548936278321665\", \"0.34845246870820656\", \"-1.7722932107691587\", \"1.888704309449281\", \"-1.1123418283924837\", \"1.3957453427395787\", \"-0.8294367151092402\", \"-1.1699534011438901\", \"1.0257270873514317\", \"0.7725006923281748\", \"0.3168385924779005\", \"-0.30234878342901056\", \"-0.1751641272612662\", \"0.3708234523019773\", \"-2.3638133220013833\", \"-0.4096668642141042\", \"-0.4503293983368002\", \"0.03271836277038858\", \"-1.4370887475738319\", \"0.19926882906384208\", \"-0.08950771441073352\", \"0.4128495165175878\",]\n\n[y]\ndescription = \"The simulated Y data\"\nunits = \"meters\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\ntype = \"data\"\ntimestamp = \"2023-10-04T00:28:57.495998\"\ncontent_hash = \"f8945d4c03988df0cd59c181035e86a9\"\ntimed_hash = \"e4a7540301cf1569c8e473b1b92d2350\"\nvalue = [ \"6.157526466969694\", \"-9.302292211258417\", \"-13.445653295124679\", \"-8.631538800322812\", \"6.90483152433306\", \"5.207550454217913\", \"0.16281392537419195\", \"11.328419829563888\", \"22.478972058029154\", \"8.09134242274941\", \"5.073777096618679\", \"10.521865081855475\", \"-16.790794925289998\", \"-8.771064388620061\", \"4.0201332562739776\", \"5.117579323047639\", \"7.625083590549531\", \"3.8773345015463985\", \"-3.928796702192886\", \"-14.12618901867805\", \"15.719046636739415\", \"-6.9901326969788835\", \"-1.2697524315402995\", \"16.200579300476225\", \"4.653298124929337\", \"15.260286007217859\", \"-8.66974802826228\", \"17.391748658118644\", \"-11.979777143905922\", \"-9.165369928333158\", \"-10.066499099879193\", \"6.630265916533632\", \"5.597192274467069\", \"21.121094702481354\", \"-0.37289209663747613\", \"-10.093484219122008\", \"-6.178013487751987\", \"4.612879529582713\", \"-6.7221265756959445\", \"1.5429361341495342\", \"-15.542297438913536\", \"-6.9087508309560315\", \"-5.756954497072782\", \"0.9567354246293611\", \"-14.214770323986233\", \"-12.709171551566424\", \"4.786356565840399\", \"-4.890780892875197\", \"-3.6073631505593395\", \"7.0359632267386765\", \"-0.24241139306973603\", \"-3.9167058403914647\", \"16.71776645328651\", \"-14.815178430705346\", \"-1.711860745824135\", \"-10.08015043115352\", \"-13.900633437259023\", \"-27.590693317580115\", \"2.4225289380487824\", \"0.4100939029862429\", \"-14.009201312069894\", \"26.99576623694627\", \"8.292226202794245\", \"-16.51426094603318\", \"-2.931299487241554\", \"-3.06749774639879\", \"-2.457980870324348\", \"-11.765930634755847\", \"-1.7957980955875312\", \"3.947583774063118\", \"1.7788813956475347\", \"-1.513133427837522\", \"21.831572921844153\", \"7.891774924891347\", \"-6.6299731645332045\", \"14.88059560881568\", \"-14.321343993977925\", \"4.842025745064475\", \"-18.45138246049829\", \"-2.5286695131892367\", \"26.92858990370225\", \"14.990430393073257\", \"-6.687320844036032\", \"-6.3145713683066536\", \"-1.865395572103326\", \"0.29997911599165183\", \"2.094399418593174\", \"5.231357076332482\", \"-10.36763582996726\", \"1.6895152163357683\", \"6.181719576405759\", \"-10.030869854369993\", \"-14.337403366313984\", \"6.834137681527773\", \"7.186270591613762\", \"-1.9468050084023705\", \"9.311246589228013\", \"0.08957849212100343\", \"-4.817637123369896\", \"7.997470135737686\",]\n\n[\"reproducible_plot.svg\"]\ndescription = \"A plot of X vs Y\"\ntype = \"file\"\ntimestamp = \"2023-10-04T00:28:57.820247\"\ncontent_hash = \"304b1a3a2ea8e020bff02374b864c296\"\ntimed_hash = \"ad72d76290f6ff0a16d232a776c1da9f\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproducible_plot.svg\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\n\n\n\nDecide which data, figures, and files to save for publication."
  },
  {
    "objectID": "index copy.html",
    "href": "index copy.html",
    "title": "reproduce.work",
    "section": "",
    "text": "reproduce.work is a set of standards, software, and people aligned for the purpose of scientific reproducibility. These components are all independent but work most effectively together:\n\nA set of standards for the structure of a computationally reproducible project for scientific publishing.\nA set of software development tools (that currently works with Python, Jupyter, and VSCode based workflows) which make it easy to create, validate, and publish reproducible projects.\n\nThis tooling is based on Docker and allows you to use any code and nearly program for your work, while ensuring that your work is reproducible.\nWe currenlty support authorship in any text-based, markdown, or notebook based environment\n🖋️ seemless, full-powered LaTeX support (not just MathJax, folks)\n🔁 auto-compiled PDFs, triggered by file changes\n🧰 cross-platform reproducibility\n\nA group of people who support the devlopment of these tools and the adoption of these standards."
  },
  {
    "objectID": "index copy.html#introduction",
    "href": "index copy.html#introduction",
    "title": "reproduce.work",
    "section": "",
    "text": "reproduce.work is a set of standards, software, and people aligned for the purpose of scientific reproducibility. These components are all independent but work most effectively together:\n\nA set of standards for the structure of a computationally reproducible project for scientific publishing.\nA set of software development tools (that currently works with Python, Jupyter, and VSCode based workflows) which make it easy to create, validate, and publish reproducible projects.\n\nThis tooling is based on Docker and allows you to use any code and nearly program for your work, while ensuring that your work is reproducible.\nWe currenlty support authorship in any text-based, markdown, or notebook based environment\n🖋️ seemless, full-powered LaTeX support (not just MathJax, folks)\n🔁 auto-compiled PDFs, triggered by file changes\n🧰 cross-platform reproducibility\n\nA group of people who support the devlopment of these tools and the adoption of these standards."
  },
  {
    "objectID": "index copy.html#at-a-glance",
    "href": "index copy.html#at-a-glance",
    "title": "reproduce.work",
    "section": "At a glance",
    "text": "At a glance\n\nMain features:\n\n✅ Computational reproducibility standards that work across all major platforms\n✅ A Python notebook-oriented workflow for publishing reproducible projects\n✅ A simple and intuitive API that fits into your existing workflow\n✅ Verifiable, traceable, reproducible results in scientific documents\n\n\n\nRoadmap features:\n\n🔳 Fancy HTML outputs\n🔳 Data validation, versioning, and provenance tracking\n🔳 Support for more target publishers and document formats\n🔳 Deep linking to verified open data and code\n\n\n\n\nPhilosophy\nThe objective of this software is to facilitate a version open science with reproducibility of computational results in published scientific work. The software is developed to integrate with existing computing paradigms and development workflows, including any docker-targeted build system. The goal is to accomodate the vast space of computation and logic that counts as “scientific computing” while providing a framework that constrains the core essence of scientific publishing to an ontology that facilitates and encourages reproducibile practices for humans both producing and consuming science."
  },
  {
    "objectID": "index copy.html#installation",
    "href": "index copy.html#installation",
    "title": "reproduce.work",
    "section": "Installation",
    "text": "Installation\nRequires Docker or suitable drop-in replacement such as OrbStack. See Docker requirement for more details.\n\nPython-based workflow\nTo incorporate reproduce.work elements into your Python-based workflow, simply install the package or include it in your requirements.txt and rebuild your project.\npip install reproduce_work"
  },
  {
    "objectID": "index copy.html#how-to-use",
    "href": "index copy.html#how-to-use",
    "title": "reproduce.work",
    "section": "How to use",
    "text": "How to use\n\nGetting started\n\nimport os\nfrom pathlib import Path\nos.chdir(Path.home())\nimport reproduce_work\nfrom reproduce_work.core import generate_config,read_base_config\nfrom reproduce_work.dynamic import publish_variable,publish_data,publish_file,register_notebook\n\nSetting reproduce.work config dir to ./reproduce\nSetting reproduce.work config dir to ./reproduce\n\n\nGenerate configuration at beginning of your project\n\ngenerate_config(inputs={\n    'authors': {\n        'author1': {\n            'name': 'Alex P. Miller',\n            'email': 'alex.miller@marshall.usc.edu',\n            'affiliation': 'USC Marshall School of Business'\n        }\n     },\n     'project': {\n        'full_title': '\\\\\\\\texttt{reproduce.work}: A framework to facilitate cross-platform computational reproducibility in scientific publishing',\n        'abstract': 'In metascience, computational reproduction is the process of reproducing the results of a scientific paper using the data and code provided by the authors of the paper. This subject sits within the broader context of \"reproducibility\" in scientific  research, which has been core to the philosophy of science for decades. However, the practice of science has fallen woefully short of meeting even basic standards toward true and widespread reproducibility. In this project, we focus primarily on addressing the narrow problem of computational reproducibility. We propose a framework for facilitating computational reproducibility in scientific publishing, which we call reproduce.work. The reproducibility standards are designed to be cross-platform and to work with any programming language. We highlight the distinction between open and reproducibile practices and showcase how our software framework encourages both simultaneously. The results of this very paper can be reproduced on any machine that can execute a containerized image using the reproduce.work workflow. We conclude by discussing the potential of the framework for improving rigor and fidelity of computational science for both producers and consumers of published work.',\n        'github_repo': 'reproduce-work/reproduce-work',\n     },\n     'nbdev_project': True,\n     'dev_image_tag': 'reproduce-work-dev',\n     #'verbose': True # enables print statements whenever data are updated/saved\n})\n\nSuccessfully generated reproduce.work configuration at reproduce/config.toml\n\n\n\nregister_notebook('index.ipynb')\n\nTrue\n\n\nRun code to analyze data and generate figures\n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\nplt.rcParams['figure.figsize'] = [6, 5]\n\nrandom_state = np.random.RandomState(552)\n\n# Generate data\nx = random_state.normal(size=100)\ny = 0.5*x + random_state.normal(scale=10, size=100)\n\n# Plot data with seaborn\nsns.set_style('white')\n\n# compute slope and stats\nslope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n# plot x-y scatter data\nx_y_plot = sns.scatterplot(x=x, y=y)\n\n# plot best fit line\nx_y_plot.plot(x, intercept + slope*x, color='black')\n\n# Compute p-value of slope \n# render p-value with 3 decimal places and no scientific notation\np_value_str = f'{p_value:.3f}'\n\n# add p-value and slope to plot\nx_y_plot.text(x=4.5, y=25, s='β')\nx_y_plot.text(x=4.75, y=20, s=f'p-value: {p_value_str}')\nx_y_plot.text(x=4.75, y=15, s=f'slope: {slope:.3f}')\nx_y_plot.text(x=4.75, y=10, s=f'intercept: {intercept:.3f}')\n\n# Set title\nx_y_plot.set_title('Reproducibly Simulated Data')\n\n# save figure\nplt.savefig('reproducible_plot.svg', bbox_inches='tight')\n_ = x_y_plot\n\n\n\n\nThere are three primary types:\n\nnamed variables\n\ndefined via: reproduce_work.publish_variable\nDesigned to be used to facilitate production and review of reproducible results\n\ndata assignments\n\ndefined via: reproduce_work.publish_data\nDesigned to standardize data management and facilitate data validation\n\nfile assignments\n\ndefined via: reproduce_work.publish_file\nDesigned to standardize file management and facilitate file validation, allowing for reproducible workflows for arbitrarily complex data structures\n\n\n\npublish_variable(p_value_str, \"p_value_str\", metadata={\n    'description': 'The p-value of the coefficient on the slope of the linear regression line.',\n})\n\n\npublish_data(x, \"x\", metadata={\n    'description': 'The simulated X data',\n    'units': 'kilograms'\n})\n\n\npublish_data(y, \"y\", metadata={\n    'description': 'The simulated Y data',\n    'units': 'meters'\n})\n\n\npublish_file('reproducible_plot.svg', metadata={\n    'description': 'A plot of X vs Y',\n})\n\n\n\n\n\nbase_config = read_base_config()\nwith open(base_config['repro']['files']['dynamic'], 'r') as f:\n    print(f.read())\n\n[p_value_str]\ndescription = \"The p-value of the coefficient on the slope of the linear regression line.\"\ntype = \"string\"\ntimestamp = \"2023-10-04T00:28:57.015843\"\nvalue = \"0.068\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\n\n[x]\ndescription = \"The simulated X data\"\nunits = \"kilograms\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\ntype = \"data\"\ntimestamp = \"2023-10-04T00:28:57.318975\"\ncontent_hash = \"38f13b81a58a7d931600e917d77dfe8f\"\ntimed_hash = \"b03c04b751b612da11eac5f1ecb6557b\"\nvalue = [ \"-0.15438854676085806\", \"-0.5912841266673995\", \"1.3457620267806991\", \"-0.3085476927297975\", \"-0.35074090433304067\", \"-1.343721369940541\", \"-0.41860346256356656\", \"2.392890531248967\", \"0.22032854237060082\", \"0.7867023188803995\", \"0.08878384294999392\", \"0.6565087673201803\", \"0.2412729155438198\", \"0.6854353883101262\", \"2.153899580706892\", \"0.649925720150528\", \"1.127458119203137\", \"-0.6357927443286684\", \"0.3077660698412044\", \"-1.6328895355458346\", \"0.567227693439327\", \"-0.21246173380662106\", \"-0.7203897514131021\", \"0.5952129857137533\", \"0.18819499630282482\", \"-0.8834998061258611\", \"0.7379945086294778\", \"-0.8471634166162177\", \"0.07930983762624676\", \"-0.10076438386878037\", \"0.4738798861563753\", \"-0.10847987920496371\", \"-1.16728052821831\", \"0.19401114268043276\", \"-1.8697690072012825\", \"-0.6079795737042001\", \"-0.46088161234713115\", \"2.8744072140185186\", \"0.5779526555390606\", \"0.18642158999690325\", \"-2.309463070393277\", \"0.9160646628168791\", \"-0.036987499173112684\", \"-0.6186664971219734\", \"-0.7375207406586269\", \"-0.3364114042058939\", \"0.6487550984010515\", \"0.7211593530346008\", \"-3.0024570001024453\", \"0.20827750750261484\", \"-0.9184527060704434\", \"-0.5672153127477911\", \"0.31933453622980007\", \"-0.37561851948771674\", \"-0.11011613613998829\", \"-2.5786876868233346\", \"-2.2352575258690286\", \"-0.14238353838147055\", \"-0.7776623814911557\", \"-0.12899276868200904\", \"0.821021437212202\", \"0.18632478617667347\", \"1.6469255261436233\", \"0.30333446984835577\", \"-0.2888772687627644\", \"0.4875026119003026\", \"0.2806902509255848\", \"-0.7998526623370962\", \"0.5301005871453163\", \"0.6998691293042977\", \"-0.08461487877674735\", \"-0.6322047366002711\", \"-0.9348762425303966\", \"-0.3857949711398192\", \"0.7758631517211686\", \"1.522836840694002\", \"0.25484897092674863\", \"2.0472839024926945\", \"-0.548936278321665\", \"0.34845246870820656\", \"-1.7722932107691587\", \"1.888704309449281\", \"-1.1123418283924837\", \"1.3957453427395787\", \"-0.8294367151092402\", \"-1.1699534011438901\", \"1.0257270873514317\", \"0.7725006923281748\", \"0.3168385924779005\", \"-0.30234878342901056\", \"-0.1751641272612662\", \"0.3708234523019773\", \"-2.3638133220013833\", \"-0.4096668642141042\", \"-0.4503293983368002\", \"0.03271836277038858\", \"-1.4370887475738319\", \"0.19926882906384208\", \"-0.08950771441073352\", \"0.4128495165175878\",]\n\n[y]\ndescription = \"The simulated Y data\"\nunits = \"meters\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\ntype = \"data\"\ntimestamp = \"2023-10-04T00:28:57.495998\"\ncontent_hash = \"f8945d4c03988df0cd59c181035e86a9\"\ntimed_hash = \"e4a7540301cf1569c8e473b1b92d2350\"\nvalue = [ \"6.157526466969694\", \"-9.302292211258417\", \"-13.445653295124679\", \"-8.631538800322812\", \"6.90483152433306\", \"5.207550454217913\", \"0.16281392537419195\", \"11.328419829563888\", \"22.478972058029154\", \"8.09134242274941\", \"5.073777096618679\", \"10.521865081855475\", \"-16.790794925289998\", \"-8.771064388620061\", \"4.0201332562739776\", \"5.117579323047639\", \"7.625083590549531\", \"3.8773345015463985\", \"-3.928796702192886\", \"-14.12618901867805\", \"15.719046636739415\", \"-6.9901326969788835\", \"-1.2697524315402995\", \"16.200579300476225\", \"4.653298124929337\", \"15.260286007217859\", \"-8.66974802826228\", \"17.391748658118644\", \"-11.979777143905922\", \"-9.165369928333158\", \"-10.066499099879193\", \"6.630265916533632\", \"5.597192274467069\", \"21.121094702481354\", \"-0.37289209663747613\", \"-10.093484219122008\", \"-6.178013487751987\", \"4.612879529582713\", \"-6.7221265756959445\", \"1.5429361341495342\", \"-15.542297438913536\", \"-6.9087508309560315\", \"-5.756954497072782\", \"0.9567354246293611\", \"-14.214770323986233\", \"-12.709171551566424\", \"4.786356565840399\", \"-4.890780892875197\", \"-3.6073631505593395\", \"7.0359632267386765\", \"-0.24241139306973603\", \"-3.9167058403914647\", \"16.71776645328651\", \"-14.815178430705346\", \"-1.711860745824135\", \"-10.08015043115352\", \"-13.900633437259023\", \"-27.590693317580115\", \"2.4225289380487824\", \"0.4100939029862429\", \"-14.009201312069894\", \"26.99576623694627\", \"8.292226202794245\", \"-16.51426094603318\", \"-2.931299487241554\", \"-3.06749774639879\", \"-2.457980870324348\", \"-11.765930634755847\", \"-1.7957980955875312\", \"3.947583774063118\", \"1.7788813956475347\", \"-1.513133427837522\", \"21.831572921844153\", \"7.891774924891347\", \"-6.6299731645332045\", \"14.88059560881568\", \"-14.321343993977925\", \"4.842025745064475\", \"-18.45138246049829\", \"-2.5286695131892367\", \"26.92858990370225\", \"14.990430393073257\", \"-6.687320844036032\", \"-6.3145713683066536\", \"-1.865395572103326\", \"0.29997911599165183\", \"2.094399418593174\", \"5.231357076332482\", \"-10.36763582996726\", \"1.6895152163357683\", \"6.181719576405759\", \"-10.030869854369993\", \"-14.337403366313984\", \"6.834137681527773\", \"7.186270591613762\", \"-1.9468050084023705\", \"9.311246589228013\", \"0.08957849212100343\", \"-4.817637123369896\", \"7.997470135737686\",]\n\n[\"reproducible_plot.svg\"]\ndescription = \"A plot of X vs Y\"\ntype = \"file\"\ntimestamp = \"2023-10-04T00:28:57.820247\"\ncontent_hash = \"304b1a3a2ea8e020bff02374b864c296\"\ntimed_hash = \"ad72d76290f6ff0a16d232a776c1da9f\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproducible_plot.svg\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\n\n\n\nDecide which data, figures, and files to save for publication."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "reproduce.work",
    "section": "",
    "text": "sci-dev-kit ⬇️\n\n\n\n\n\n\n\nreproduce.work paper\n\n\n\n\n\n\n\n\nreproduce_work\n\n\npython package"
  },
  {
    "objectID": "introduction.html#introduction",
    "href": "introduction.html#introduction",
    "title": "reproduce.work",
    "section": "Introduction",
    "text": "Introduction\nreproduce.work is a set of standards, software, and people aligned for the purpose of scientific reproducibility. These components are all independent but work most effectively together:\n\nA set of standards for the structure of a computationally reproducible project for scientific publishing.\nA set of software development tools (that currently works with Python, Jupyter, and VSCode based workflows) which make it easy to create, validate, and publish reproducible projects.\n\nThis tooling is based on Docker and allows you to use any code and nearly program for your work, while ensuring that your work is reproducible.\nWe currenlty support authorship in any text-based, markdown, or notebook based environment\n🖋️ seemless, full-powered LaTeX support (not just MathJax, folks)\n🔁 auto-compiled PDFs, triggered by file changes\n🧰 cross-platform reproducibility\n\nA group of people who support the devlopment of these tools and the adoption of these standards."
  },
  {
    "objectID": "introduction.html#at-a-glance",
    "href": "introduction.html#at-a-glance",
    "title": "reproduce.work",
    "section": "At a glance",
    "text": "At a glance\n\nMain features:\n\n✅ Computational reproducibility standards that work across all major platforms\n✅ A Python notebook-oriented workflow for publishing reproducible projects\n✅ A simple and intuitive API that fits into your existing workflow\n✅ Verifiable, traceable, reproducible results in scientific documents\n\n\n\nRoadmap features:\n\n🔳 Fancy HTML outputs\n🔳 Data validation, versioning, and provenance tracking\n🔳 Support for more target publishers and document formats\n🔳 Deep linking to verified open data and code\n\n\n\n\nPhilosophy\nThe objective of this software is to facilitate a version open science with reproducibility of computational results in published scientific work. The software is developed to integrate with existing computing paradigms and development workflows, including any docker-targeted build system. The goal is to accomodate the vast space of computation and logic that counts as “scientific computing” while providing a framework that constrains the core essence of scientific publishing to an ontology that facilitates and encourages reproducibile practices for humans both producing and consuming science."
  },
  {
    "objectID": "introduction.html#installation",
    "href": "introduction.html#installation",
    "title": "reproduce.work",
    "section": "Installation",
    "text": "Installation\nRequires Docker or suitable drop-in replacement such as OrbStack. See Docker requirement for more details.\n\nPython-based workflow\nTo incorporate reproduce.work elements into your Python-based workflow, simply install the package or include it in your requirements.txt and rebuild your project.\npip install reproduce_work"
  },
  {
    "objectID": "introduction.html#how-to-use",
    "href": "introduction.html#how-to-use",
    "title": "reproduce.work",
    "section": "How to use",
    "text": "How to use\n\nGetting started\n\nimport os\nfrom pathlib import Path\nos.chdir(Path.home())\nimport reproduce_work\nfrom reproduce_work.core import generate_config,read_base_config\nfrom reproduce_work.dynamic import publish_variable,publish_data,publish_file,register_notebook\n\nSetting reproduce.work config dir to ./reproduce\nSetting reproduce.work config dir to ./reproduce\n\n\nGenerate configuration at beginning of your project\n\ngenerate_config(inputs={\n    'authors': {\n        'author1': {\n            'name': 'Alex P. Miller',\n            'email': 'alex.miller@marshall.usc.edu',\n            'affiliation': 'USC Marshall School of Business'\n        }\n     },\n     'project': {\n        'full_title': '\\\\\\\\texttt{reproduce.work}: A framework to facilitate cross-platform computational reproducibility in scientific publishing',\n        'abstract': 'In metascience, computational reproduction is the process of reproducing the results of a scientific paper using the data and code provided by the authors of the paper. This subject sits within the broader context of \"reproducibility\" in scientific  research, which has been core to the philosophy of science for decades. However, the practice of science has fallen woefully short of meeting even basic standards toward true and widespread reproducibility. In this project, we focus primarily on addressing the narrow problem of computational reproducibility. We propose a framework for facilitating computational reproducibility in scientific publishing, which we call reproduce.work. The reproducibility standards are designed to be cross-platform and to work with any programming language. We highlight the distinction between open and reproducibile practices and showcase how our software framework encourages both simultaneously. The results of this very paper can be reproduced on any machine that can execute a containerized image using the reproduce.work workflow. We conclude by discussing the potential of the framework for improving rigor and fidelity of computational science for both producers and consumers of published work.',\n        'github_repo': 'reproduce-work/reproduce-work',\n     },\n     'nbdev_project': True,\n     'dev_image_tag': 'reproduce-work-dev',\n     #'verbose': True # enables print statements whenever data are updated/saved\n})\n\nSuccessfully generated reproduce.work configuration at reproduce/config.toml\n\n\n\nregister_notebook('index.ipynb')\n\nTrue\n\n\nRun code to analyze data and generate figures\n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\nplt.rcParams['figure.figsize'] = [6, 5]\n\nrandom_state = np.random.RandomState(552)\n\n# Generate data\nx = random_state.normal(size=100)\ny = 0.5*x + random_state.normal(scale=10, size=100)\n\n# Plot data with seaborn\nsns.set_style('white')\n\n# compute slope and stats\nslope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n# plot x-y scatter data\nx_y_plot = sns.scatterplot(x=x, y=y)\n\n# plot best fit line\nx_y_plot.plot(x, intercept + slope*x, color='black')\n\n# Compute p-value of slope \n# render p-value with 3 decimal places and no scientific notation\np_value_str = f'{p_value:.3f}'\n\n# add p-value and slope to plot\nx_y_plot.text(x=4.5, y=25, s='β')\nx_y_plot.text(x=4.75, y=20, s=f'p-value: {p_value_str}')\nx_y_plot.text(x=4.75, y=15, s=f'slope: {slope:.3f}')\nx_y_plot.text(x=4.75, y=10, s=f'intercept: {intercept:.3f}')\n\n# Set title\nx_y_plot.set_title('Reproducibly Simulated Data')\n\n# save figure\nplt.savefig('reproducible_plot.svg', bbox_inches='tight')\n_ = x_y_plot\n\n\n\n\nThere are three primary types:\n\ndata assignments\n\ndefined via: reproduce_work.publish_data\nDesigned to standardize data management and facilitate data validation\n\nfile assignments\n\ndefined via: reproduce_work.publish_file\nDesigned to standardize file management and facilitate file validation, allowing for reproducible workflows for arbitrarily complex data structures\n\n\n\npublish_variable(p_value_str, \"p_value_str\", metadata={\n    'description': 'The p-value of the coefficient on the slope of the linear regression line.',\n})\n\n\npublish_data(x, \"x\", metadata={\n    'description': 'The simulated X data',\n    'units': 'kilograms'\n})\n\n\npublish_data(y, \"y\", metadata={\n    'description': 'The simulated Y data',\n    'units': 'meters'\n})\n\n\npublish_file('reproducible_plot.svg', metadata={\n    'description': 'A plot of X vs Y',\n})\n\n\n\n\n\nbase_config = read_base_config()\nwith open(base_config['repro']['files']['dynamic'], 'r') as f:\n    print(f.read())\n\n[p_value_str]\ndescription = \"The p-value of the coefficient on the slope of the linear regression line.\"\ntype = \"string\"\ntimestamp = \"2023-10-04T00:28:57.015843\"\nvalue = \"0.068\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\n\n[x]\ndescription = \"The simulated X data\"\nunits = \"kilograms\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\ntype = \"data\"\ntimestamp = \"2023-10-04T00:28:57.318975\"\ncontent_hash = \"38f13b81a58a7d931600e917d77dfe8f\"\ntimed_hash = \"b03c04b751b612da11eac5f1ecb6557b\"\nvalue = [ \"-0.15438854676085806\", \"-0.5912841266673995\", \"1.3457620267806991\", \"-0.3085476927297975\", \"-0.35074090433304067\", \"-1.343721369940541\", \"-0.41860346256356656\", \"2.392890531248967\", \"0.22032854237060082\", \"0.7867023188803995\", \"0.08878384294999392\", \"0.6565087673201803\", \"0.2412729155438198\", \"0.6854353883101262\", \"2.153899580706892\", \"0.649925720150528\", \"1.127458119203137\", \"-0.6357927443286684\", \"0.3077660698412044\", \"-1.6328895355458346\", \"0.567227693439327\", \"-0.21246173380662106\", \"-0.7203897514131021\", \"0.5952129857137533\", \"0.18819499630282482\", \"-0.8834998061258611\", \"0.7379945086294778\", \"-0.8471634166162177\", \"0.07930983762624676\", \"-0.10076438386878037\", \"0.4738798861563753\", \"-0.10847987920496371\", \"-1.16728052821831\", \"0.19401114268043276\", \"-1.8697690072012825\", \"-0.6079795737042001\", \"-0.46088161234713115\", \"2.8744072140185186\", \"0.5779526555390606\", \"0.18642158999690325\", \"-2.309463070393277\", \"0.9160646628168791\", \"-0.036987499173112684\", \"-0.6186664971219734\", \"-0.7375207406586269\", \"-0.3364114042058939\", \"0.6487550984010515\", \"0.7211593530346008\", \"-3.0024570001024453\", \"0.20827750750261484\", \"-0.9184527060704434\", \"-0.5672153127477911\", \"0.31933453622980007\", \"-0.37561851948771674\", \"-0.11011613613998829\", \"-2.5786876868233346\", \"-2.2352575258690286\", \"-0.14238353838147055\", \"-0.7776623814911557\", \"-0.12899276868200904\", \"0.821021437212202\", \"0.18632478617667347\", \"1.6469255261436233\", \"0.30333446984835577\", \"-0.2888772687627644\", \"0.4875026119003026\", \"0.2806902509255848\", \"-0.7998526623370962\", \"0.5301005871453163\", \"0.6998691293042977\", \"-0.08461487877674735\", \"-0.6322047366002711\", \"-0.9348762425303966\", \"-0.3857949711398192\", \"0.7758631517211686\", \"1.522836840694002\", \"0.25484897092674863\", \"2.0472839024926945\", \"-0.548936278321665\", \"0.34845246870820656\", \"-1.7722932107691587\", \"1.888704309449281\", \"-1.1123418283924837\", \"1.3957453427395787\", \"-0.8294367151092402\", \"-1.1699534011438901\", \"1.0257270873514317\", \"0.7725006923281748\", \"0.3168385924779005\", \"-0.30234878342901056\", \"-0.1751641272612662\", \"0.3708234523019773\", \"-2.3638133220013833\", \"-0.4096668642141042\", \"-0.4503293983368002\", \"0.03271836277038858\", \"-1.4370887475738319\", \"0.19926882906384208\", \"-0.08950771441073352\", \"0.4128495165175878\",]\n\n[y]\ndescription = \"The simulated Y data\"\nunits = \"meters\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproduce/pubdata.toml\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\ntype = \"data\"\ntimestamp = \"2023-10-04T00:28:57.495998\"\ncontent_hash = \"f8945d4c03988df0cd59c181035e86a9\"\ntimed_hash = \"e4a7540301cf1569c8e473b1b92d2350\"\nvalue = [ \"6.157526466969694\", \"-9.302292211258417\", \"-13.445653295124679\", \"-8.631538800322812\", \"6.90483152433306\", \"5.207550454217913\", \"0.16281392537419195\", \"11.328419829563888\", \"22.478972058029154\", \"8.09134242274941\", \"5.073777096618679\", \"10.521865081855475\", \"-16.790794925289998\", \"-8.771064388620061\", \"4.0201332562739776\", \"5.117579323047639\", \"7.625083590549531\", \"3.8773345015463985\", \"-3.928796702192886\", \"-14.12618901867805\", \"15.719046636739415\", \"-6.9901326969788835\", \"-1.2697524315402995\", \"16.200579300476225\", \"4.653298124929337\", \"15.260286007217859\", \"-8.66974802826228\", \"17.391748658118644\", \"-11.979777143905922\", \"-9.165369928333158\", \"-10.066499099879193\", \"6.630265916533632\", \"5.597192274467069\", \"21.121094702481354\", \"-0.37289209663747613\", \"-10.093484219122008\", \"-6.178013487751987\", \"4.612879529582713\", \"-6.7221265756959445\", \"1.5429361341495342\", \"-15.542297438913536\", \"-6.9087508309560315\", \"-5.756954497072782\", \"0.9567354246293611\", \"-14.214770323986233\", \"-12.709171551566424\", \"4.786356565840399\", \"-4.890780892875197\", \"-3.6073631505593395\", \"7.0359632267386765\", \"-0.24241139306973603\", \"-3.9167058403914647\", \"16.71776645328651\", \"-14.815178430705346\", \"-1.711860745824135\", \"-10.08015043115352\", \"-13.900633437259023\", \"-27.590693317580115\", \"2.4225289380487824\", \"0.4100939029862429\", \"-14.009201312069894\", \"26.99576623694627\", \"8.292226202794245\", \"-16.51426094603318\", \"-2.931299487241554\", \"-3.06749774639879\", \"-2.457980870324348\", \"-11.765930634755847\", \"-1.7957980955875312\", \"3.947583774063118\", \"1.7788813956475347\", \"-1.513133427837522\", \"21.831572921844153\", \"7.891774924891347\", \"-6.6299731645332045\", \"14.88059560881568\", \"-14.321343993977925\", \"4.842025745064475\", \"-18.45138246049829\", \"-2.5286695131892367\", \"26.92858990370225\", \"14.990430393073257\", \"-6.687320844036032\", \"-6.3145713683066536\", \"-1.865395572103326\", \"0.29997911599165183\", \"2.094399418593174\", \"5.231357076332482\", \"-10.36763582996726\", \"1.6895152163357683\", \"6.181719576405759\", \"-10.030869854369993\", \"-14.337403366313984\", \"6.834137681527773\", \"7.186270591613762\", \"-1.9468050084023705\", \"9.311246589228013\", \"0.08957849212100343\", \"-4.817637123369896\", \"7.997470135737686\",]\n\n[\"reproducible_plot.svg\"]\ndescription = \"A plot of X vs Y\"\ntype = \"file\"\ntimestamp = \"2023-10-04T00:28:57.820247\"\ncontent_hash = \"304b1a3a2ea8e020bff02374b864c296\"\ntimed_hash = \"ad72d76290f6ff0a16d232a776c1da9f\"\npublished_url = \"https://github.com/reproduce-work/reproduce-work/reproducible_plot.svg\"\ngenerating_script = \"https://github.com/reproduce-work/reproduce-work/nbs/index.ipynb\"\n\n\n\nDecide which data, figures, and files to save for publication."
  }
]